// automatically generated by Xtext
grammar org.xtext.example.mydot.MyDot with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/gef/dot/internal/language/Dot" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DotAst returns DotAst:
	{DotAst}
	'DotAst'
	'{'
		'graphs' '{' graphs+=DotGraph ( "," graphs+=DotGraph)* '}' 
	'}';

Stmt returns Stmt:
	Stmt_Impl | EdgeStmtNode | EdgeStmtSubgraph | NodeStmt | AttrStmt | Attribute | SubgraphOrEdgeStmtSubgraph_Impl | Subgraph;

EdgeRhs returns EdgeRhs:
	EdgeRhs_Impl | EdgeRhsNode | EdgeRhsSubgraph;

DotGraph returns DotGraph:
	{DotGraph}
	strict?='strict'
	'DotGraph'
	name=EString
	'{'
		'type' type=GraphType
		'stmts' '{' stmts+=Stmt ( "," stmts+=Stmt)* '}' 
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum GraphType returns GraphType:
				graph = 'graph' | digraph = 'digraph';

EString returns ecore::EString:
	STRING | ID;

Stmt_Impl returns Stmt:
	{Stmt}
	'Stmt'
	;

EdgeStmtNode returns EdgeStmtNode:
	{EdgeStmtNode}
	'EdgeStmtNode'
	'{'
		'node' node=NodeId
		'edgeRHS' '{' edgeRHS+=EdgeRhs ( "," edgeRHS+=EdgeRhs)* '}' 
		'attrLists' '{' attrLists+=AttrList ( "," attrLists+=AttrList)* '}' 
	'}';

EdgeStmtSubgraph returns EdgeStmtSubgraph:
	{EdgeStmtSubgraph}
	'EdgeStmtSubgraph'
	'{'
		'subgraph' subgraph=Subgraph
		'edgeRHS' '{' edgeRHS+=EdgeRhs ( "," edgeRHS+=EdgeRhs)* '}' 
		'attrLists' '{' attrLists+=AttrList ( "," attrLists+=AttrList)* '}' 
	'}';

NodeStmt returns NodeStmt:
	{NodeStmt}
	'NodeStmt'
	'{'
		'node' node=NodeId
		'attrLists' '{' attrLists+=AttrList ( "," attrLists+=AttrList)* '}' 
	'}';

AttrStmt returns AttrStmt:
	{AttrStmt}
	'AttrStmt'
	'{'
		'type' type=AttributeType
		'attrLists' '{' attrLists+=AttrList ( "," attrLists+=AttrList)* '}' 
	'}';

Attribute returns Attribute:
	{Attribute}
	'Attribute'
	name=EString
	'{'
		'value' value=EString
	'}';

SubgraphOrEdgeStmtSubgraph_Impl returns SubgraphOrEdgeStmtSubgraph:
	{SubgraphOrEdgeStmtSubgraph}
	'SubgraphOrEdgeStmtSubgraph'
	;

Subgraph returns Subgraph:
	{Subgraph}
	'Subgraph'
	name=EString
	'{'
		'stmts' '{' stmts+=Stmt ( "," stmts+=Stmt)* '}' 
	'}';

NodeId returns NodeId:
	{NodeId}
	'NodeId'
	name=EString
	'{'
		'port' port=Port
	'}';

EdgeRhs_Impl returns EdgeRhs:
	{EdgeRhs}
	'EdgeRhs'
	'{'
		'op' op=EdgeOp
	'}';

AttrList returns AttrList:
	{AttrList}
	'AttrList'
	'{'
		'attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' 
	'}';

Port returns Port:
	{Port}
	'Port'
	name=EString
	'{'
		'compass_pt' compass_pt=EString
	'}';

enum EdgeOp returns EdgeOp:
				directed = 'directed' | undirected = 'undirected';

EdgeRhsNode returns EdgeRhsNode:
	{EdgeRhsNode}
	'EdgeRhsNode'
	'{'
		'op' op=EdgeOp
		'node' node=NodeId
	'}';

EdgeRhsSubgraph returns EdgeRhsSubgraph:
	{EdgeRhsSubgraph}
	'EdgeRhsSubgraph'
	'{'
		'op' op=EdgeOp
		'subgraph' subgraph=Subgraph
	'}';

enum AttributeType returns AttributeType:
				graph = 'graph' | node = 'node' | edge = 'edge';

