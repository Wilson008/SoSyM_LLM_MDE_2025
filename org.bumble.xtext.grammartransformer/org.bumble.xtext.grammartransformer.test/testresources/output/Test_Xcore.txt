// automatically generated by Xtext
grammar org.xtext.example.xcore.Xcore with org.eclipse.xtext.xbase.Xbase
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/emf/2002/GenModel" as genmodel
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as javaVMTypes
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype

import "http://www.eclipse.org/emf/2011/Xcore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

XPackage returns XPackage:
    {XPackage}
          (annotations+=XAnnotation)*  
    'package'
    name=QualifiedName
    
          (importDirectives+=XImportDirective)*  
          (annotationDirectives+=XAnnotationDirective)*  
          (classifiers+=XClassifier)*  
    ;

XClassifier returns XClassifier:
    XClass | XDataType | XEnum;

XMember returns XMember:
    XAttribute | XOperation | XReference;

XAnnotation returns XAnnotation:
    {XAnnotation}
    
        '@' source=[XAnnotationDirective|XQualifiedName]
        ( '(' details+=XStringToStringMapEntry ( "," details+=XStringToStringMapEntry)* ')' )?
    ;

XImportDirective returns XImportDirective:
    {XImportDirective}
    'import'
    
         (importedNamespace=QualifiedNameWithWildcard |
         importedObject=[ecore::EObject|QualifiedName])
    ;

XAnnotationDirective returns XAnnotationDirective:
    {XAnnotationDirective}
    
        =>('annotation' sourceURI=STRING)
 'as' 
    name=ValidID
    
    ;

XStringToStringMapEntry returns XStringToStringMapEntry:
    {XStringToStringMapEntry}
    
    
         key=QualifiedName
 '=' 
         value=STRING
    ;

XTypeParameter returns XTypeParameter:
    {XTypeParameter}
    
          (annotations+=XAnnotation)*  
    name=ID
    
        ('extends'  bounds+=XGenericType ( "&" bounds+=XGenericType)*  )?
    ;

XClass returns XClass:
    {XClass}
          (annotations+=XAnnotation)*  
    ((abstract?='abstract'? 'class') |
    
    interface?='interface')
    name=ID
        ( '<' typeParameters+=XTypeParameter ( "," typeParameters+=XTypeParameter)* '>' )?
        ('extends'  superTypes+=XGenericType ( "," superTypes+=XGenericType)*  )?
        ('wraps' instanceType=JvmTypeReference)?
    '{'
          (members+=XMember)*  
    '}';

XDataType returns XDataType:
    {XDataType}
          (annotations+=XAnnotation)*  
    'type'
    name=ID
        ( '<' typeParameters+=XTypeParameter ( "," typeParameters+=XTypeParameter)* '>' )?
        'wraps' instanceType=JvmTypeReference
        ((serializable?='create'
         createBody=XBlockExpression)? &
        ('convert' convertBody=XBlockExpression)?)
    ;

XEnum returns XEnum:
    {XEnum}
          (annotations+=XAnnotation)*  
    'enum'
    name=ID
    '{'
        (  literals+=XEnumLiteral ( (",")? literals+=XEnumLiteral)*  )?
    '}';

XGenericType returns XGenericType:
    {XGenericType}
    
    
         type=[genmodel::GenBase|XQualifiedName]
          (=>'<'typeArguments+=XGenericTypeArgument ( "," typeArguments+=XGenericTypeArgument)*  '>')?
    ;

XMultiplicity returns XMultiplicity:
    '[' ('?' | '*' | '+' | (INT ('..' (INT | '?' | '*'))?))? ']';

XAttribute returns XAttribute:
    {XAttribute}
          (annotations+=XAnnotation)*  
    ((unordered?='unordered')?&
    (unique?='unique')?&
    (readonly?='readonly')?&
    (transient?='transient')?&
    (volatile?='volatile')?&
    (unsettable?='unsettable')?&
    (derived?='derived')?&
    (iD?='iD')?)
    
         type=XGenericType
        ( multiplicity=XMultiplicity)?
    name=ID
        ('=' defaultValueLiteral=STRING)?
        (('get' getBody=XBlockExpression)? &
        ('set' setBody=XBlockExpression)? &
        ('isSet' isSetBody=XBlockExpression)? &
        ('unset' unsetBody=XBlockExpression)?)
    ;

XOperation returns XOperation:
    {XOperation}
          (annotations+=XAnnotation)*   'op' 
    (unordered?='unordered' unique?='unique'?|
    unique?='unique' unordered?='unordered'?)?
    
        ( '<' typeParameters+=XTypeParameter ( "," typeParameters+=XTypeParameter)* '>' )?
         (type=XGenericType | 'void')
        ( multiplicity=XMultiplicity)?
    name=ID
          '('(parameters+=XParameter ( "," parameters+=XParameter)*  )?')'
        ('throws'  exceptions+=XGenericType ( "," exceptions+=XGenericType)*  )?
        ( body=XBlockExpression)?
    ;

XReference returns XReference:
    {XReference}
          (annotations+=XAnnotation)*  
    ((containment?='contains' resolveProxies?='resolving'?) |
    (resolveProxies?='resolving' containment?='contains') |
    (container?='container' resolveProxies?='resolving'?) | (resolveProxies?='resolving' container?='container') |
    ('refers' local?='local'?) | (local?='local' 'refers'))
    ((unordered?='unordered')? &
    (unique?='unique')? &
    (readonly?='readonly')? &
    (transient?='transient')? &
    (volatile?='volatile')? &
    (unsettable?='unsettable')? &
    (derived?='derived')?)
    
         type=XGenericType
        ( multiplicity=XMultiplicity)?
    name=ID
    
        ('opposite' opposite=[genmodel::GenFeature|ValidID])?
        ('keys'  keys+=[genmodel::GenFeature|ValidID] ( "," keys+=[genmodel::GenFeature|ValidID])*  )?
        (('get' getBody=XBlockExpression)? &
        ('set' setBody=XBlockExpression)? &
        ('isSet' isSetBody=XBlockExpression)? &
        ('unset' unsetBody=XBlockExpression)?)
    ;

XParameter returns XParameter:
    {XParameter}
          (annotations+=XAnnotation)*  
    (unordered?='unordered' unique?='unique'?|
    unique?='unique' unordered?='unordered'?)?
    
         type=XGenericType
        ( multiplicity=XMultiplicity)?
    name=ID
    
    ;

XEnumLiteral returns XEnumLiteral:
    {XEnumLiteral}
    
          (annotations+=XAnnotation)*  
    name=ID
    
        ('as' literal=STRING)?
        ('=' value=SignedInt)?
    ;

SignedInt returns ecore::EInt:
    '-'? INT;

@Override
XBlockExpression returns xbase::XBlockExpression:
    {xbase::XBlockExpression}
    '{'
        (expressions+=XExpressionOrVarDeclaration ';'?)*
    '}'
;

XGenericTypeArgument returns XGenericType:
    XGenericType |
    XGenericWildcardTypeArgument
;

XGenericWildcardTypeArgument returns XGenericType:
    {XGenericType}
    '?' ('extends' upperBound=XGenericType | 'super' lowerBound=XGenericType)?
;

XQualifiedName:
    XID ('.' XID)*
;

XID:
    ID | 'get' | 'isSet' | 'set' | 'unset'
;

@Override
ValidID:
    XID | 'void'
;

@Override
FeatureCallID:
    ValidID | 'abstract' | 'annotation' | 'as' | 'class' | 'container' | 'contains' | 'convert' | 'create' | 'derived' | 'enum' | 'extends' | 'extension' | 'id' | 'import' | 'keys' |
	'interface'| 'local' | 'op' | 'opposite' | 'package' | 'readonly' | 'refers' | 'resolving' | 'static' | 'throws' | 'transient' | 'unique' | 'unordered' | 'unsettable'|
	'volatile' | 'wraps'
;

