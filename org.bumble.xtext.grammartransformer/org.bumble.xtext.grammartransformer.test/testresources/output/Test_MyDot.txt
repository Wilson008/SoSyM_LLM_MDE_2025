// automatically generated by Xtext
grammar org.xtext.example.mydot.MyDot with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/gef/dot/internal/language/Dot" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DotAst returns DotAst:
    {DotAst}
    
    
          (graphs+=DotGraph)*  
    ;

Stmt returns Stmt:
  (EdgeStmtNode |  NodeStmt | AttrStmt | Attribute | SubgraphOrEdgeStmtSubgraph ) (';')? ;

EdgeRhs returns EdgeRhs:
  EdgeRhsNode | EdgeRhsSubgraph;

DotGraph returns DotGraph:
    {DotGraph}
    (strict?='strict')?
    
         type=GraphType
    (name=ID)?
    '{'
          (stmts+=Stmt)*  
    '}';

enum GraphType returns GraphType:
                graph = 'graph' | digraph = 'digraph';

EString returns ecore::EString:
    STRING | ID;

EdgeStmtNode returns EdgeStmtNode:
    {EdgeStmtNode}
    
    
         node=NodeId
          (edgeRHS+=EdgeRhs)+  
          (attrLists+=AttrList)*  
    ;

EdgeStmtSubgraph returns EdgeStmtSubgraph:
    {EdgeStmtSubgraph}
    
    
         subgraph=Subgraph
          (edgeRHS+=EdgeRhs)+  
          (attrLists+=AttrList)*  
    ;

NodeStmt returns NodeStmt:
    {NodeStmt}
    
    
         node=NodeId
          (attrLists+=AttrList)*  
    ;

AttrStmt returns AttrStmt:
    {AttrStmt}
    
    
         type=AttributeType
          (attrLists+=AttrList)+  
    ;

Attribute returns Attribute:
    {Attribute}
    
    name=EString
    
        '=' value=EString
    ;

SubgraphOrEdgeStmtSubgraph returns SubgraphOrEdgeStmtSubgraph:
    Subgraph ({EdgeStmtSubgraph.subgraph=current}
    (edgeRHS+=EdgeRhs)+
    (attrLists+=AttrList)*)?;

Subgraph returns Subgraph:
    {Subgraph}
    
    ('subgraph' (name=ID)?)?
    '{'
          (stmts+=Stmt)*  
    '}';

NodeId returns NodeId:
    {NodeId}
    
    name=ID
    
        ( port=Port)?
    ;

AttrList returns AttrList:
    {AttrList}
    
    '['
          (attributes+=Attribute (',' | ';')?)*  
    ']';

Port returns Port:
    {Port}
    ':'
    (=> compass_pt=COMPASS_PT |
        name=ID |
        name=ID ":" compass_pt=COMPASS_PT);

enum EdgeOp returns EdgeOp:
                directed = '->' | undirected = '--';

EdgeRhsNode returns EdgeRhsNode:
    {EdgeRhsNode}
    
    
         op=EdgeOp
         node=NodeId
    ;

EdgeRhsSubgraph returns EdgeRhsSubgraph:
    {EdgeRhsSubgraph}
    
    
         op=EdgeOp
         subgraph=Subgraph
    ;

enum AttributeType returns AttributeType:
                graph = 'graph' | node = 'node' | edge = 'edge';

terminal COMPASS_PT:
    'n' | 'ne' | 'e' | 'se' | 's' | 'sw' | 'w' | 'nw' | 'c' | '_';

