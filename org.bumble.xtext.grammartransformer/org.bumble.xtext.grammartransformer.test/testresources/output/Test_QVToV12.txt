// automatically generated by Xtext
grammar org.omg.qvt12.myqvto.MyQvto with org.eclipse.xtext.common.Terminals

import "http://schema.omg.org/spec/QVT/1.2/emof" 
import "http://schema.omg.org/spec/QVT/1.2/primitivetypes" as PrimitiveTypes
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://schema.omg.org/spec/QVT/1.2/qvtoperational" as QVTOperational

TopLevelGO returns QVTOperational::TopLevelGO:
    {QVTOperational::TopLevelGO}
    
    
          (moduleimport+=ModuleImport)*  
          (unit_element+=Module)*  
    ;

Module returns QVTOperational::Module:
  Constructor | ContextualProperty | EntryOperation | Helper | Library | MappingOperation | ModelType | OperationalTransformation | TagGO | MetaModelGO | AccessDecl | TypeDef | ClassifierGO;

ImperativeOperation returns QVTOperational::ImperativeOperation:
  Constructor | ContextualProperty | EntryOperation | Helper | MappingOperation | TagGO | AccessDecl | TypeDef | ClassifierGO;

ModuleImport returns QVTOperational::ModuleImport:
    
    
          'from' unit=UnitRefGO 'import' (identifier+=ID ( "," identifier+=ID)*  | '*') ';' |
        'import' unit=UnitRefGO ';'
    ;

EntryOperation returns QVTOperational::EntryOperation:
    
         entry_header=EntryHeader ( ';' |
    
         expression_block=ExpressionBlock (';')?)
    ;

ExpressionGO returns QVTOperational::ExpressionGO:
    {QVTOperational::ExpressionGO}
    
    
          (dummyContent+=EString)*  
    ;

ModelType returns QVTOperational::ModelType:
    'modeltype'
    
         name=ID
        ( compliance_kind=STRING)?
        'uses'  packageref_list+=PackageRefGO ( "," packageref_list+=PackageRefGO)*  
        ( 'where'  modeltype_where=ExpressionBlock)?
     ';' ;

Constructor returns QVTOperational::Constructor:
    
         constructor_header=ConstructorHeader ( ';' |
    
         expression_block=ExpressionBlock (';')?)
    ;

ContextualProperty returns QVTOperational::ContextualProperty:
    ('intermediate')?
    
          (property_key+=PropertyKey)+  
         declarator=Declarator
     ';' ;

Helper returns QVTOperational::Helper:
    
    
         helper_header=HelperHeader ( ';' |
         '=' expression=ExpressionGO ';' |
         expression_block=ExpressionBlock (';')?)
    ;

Library returns QVTOperational::Library:
    
         library_h=LibraryHeader ( ';' |
         '{' (module_element+=ImperativeOperation)* '}'  (';')?)
    ;

MappingOperation returns QVTOperational::MappingOperation:
    
         mapping_full_header=MappingFullHeader ( ';' |
    
         '{'mapping_body=MappingBody'}' (';')?)
    ;

OperationalTransformation returns QVTOperational::OperationalTransformation:
    
         transformation_h=TransformationHeader ( ';' |
         '{' (module_element+=ImperativeOperation)* '}'  (';')? )
    ;

TagGO returns QVTOperational::TagGO:
    'tag'
    
         tagid=STRING
         scoped_identifier=ScopedIdentifier
        ('=' tagvalue=ExpressionGO)?
     ';' ;

MetaModelGO returns QVTOperational::MetaModelGO:
    
         metamodel_h=MetaModelHeader ( ';' |
         '{' (metamodel_element+=MetaModelElement)* '}'  (';')?)
    ;

AccessDecl returns QVTOperational::AccessDecl:
    
    
         access_usage=AccessUsage ';'
    ;

TypeDef returns QVTOperational::TypeDef:
    'typedef'
    
         name=ID
         '=' typespec=TypeSpec
        ( '['typedef_condition=ExpressionGO']')?
     ';' ;

ClassifierGO returns QVTOperational::ClassifierGO:
    
         classifier_h=ClassifierHeader ( ';' |
        '{'( classifier_feature_list=ClassifierFeatureList)?'}' (';')?)
    ;

VarParameter returns QVTOperational::VarParameter:
    
    
        ( kind=DirectionKind)?
         declarator=Declarator
    ;

EntryHeader returns QVTOperational::EntryHeader:
    
    
        'main' simple_signature=SimpleSignature
    ;

ExpressionBlock returns QVTOperational::ExpressionBlock:
    {QVTOperational::ExpressionBlock}
    
    '{'
        ( expression_list=ExpressionList)?
    '}';

MappingBody returns QVTOperational::MappingBody:
    {QVTOperational::MappingBody}
    
    
          ('init' '{'(initSection+=ExpressionGO ( ";" initSection+=ExpressionGO)*   (';')?)?'}')?
        ( population_section=PopulationSection)?
          ('end' '{'(endSection+=ExpressionGO ( ";" endSection+=ExpressionGO)*   (';')?)?'}')?
    ;

PopulationSection returns QVTOperational::PopulationSection:
    {QVTOperational::PopulationSection}
    
    
         expression_list=ExpressionList |
         'population' expression_block=ExpressionBlock
    ;

ExpressionList returns QVTOperational::ExpressionList:
    
    
         expression_semi_list=ExpressionSemiList (';')?
    ;

ExpressionSemiList returns QVTOperational::ExpressionSemiList:
    {QVTOperational::ExpressionSemiList}
    
    
          expression+=ExpressionGO ( "," expression+=ExpressionGO)*  
    ;

EString returns ecore::EString:
    STRING | ID;

enum DirectionKind returns QVTOperational::DirectionKind:
                in = 'in' | inout = 'inout' | out = 'out';

Declarator returns QVTOperational::Declarator:
    
    
         typespec=TypeSpec
        ( init_part=InitPart)?|
         scoped_identifier=ScopedIdentifier ':' typespec=TypeSpec ( init_part=InitPart)?
    ;

TypeSpec returns QVTOperational::TypeSpec:
    
    
         type_reference=TypeReference
        ('@' extent_location=ID)?
    ;

InitPart returns QVTOperational::InitPart:
    
    
         init_op=('=' | ':=' | '::=')
         expression=ExpressionGO
    ;

ScopedIdentifier returns QVTOperational::ScopedIdentifier:
    {QVTOperational::ScopedIdentifier}
    
    
          identifier+=ID ( "::" identifier+=ID)*  
    ;

TypeReference returns QVTOperational::TypeReference:
    {QVTOperational::TypeReference}
    
    
         scoped_identifier=ScopedIdentifier |
         complex_type=ComplexType
    ;

ComplexType returns QVTOperational::ComplexType:
    {QVTOperational::ComplexType}
    
    
         complex_type_key=ComplexTypeKey |
         collection_key=CollectionKey '(' typespec+=TypeSpec ')' |
          'Dict' '(' typespec+=TypeSpec','typespec+=TypeSpec   ')' |
         'Tuple' '('declarator_list=DeclaratorList')'
    ;

enum ComplexTypeKey returns QVTOperational::ComplexTypeKey:
                Collection = 'Collection' | Set = 'Set' | OrderedSet = 'OrderedSet' | Sequence = 'Sequence' | Bag = 'Bag' | List = 'List' | Dict = 'Dict' | Tuple = 'Tuple';

enum CollectionKey returns QVTOperational::CollectionKey:
                Collection = 'Collection' | Set = 'Set' | OrderedSet = 'OrderedSet' | Sequence = 'Sequence' | Bag = 'Bag' | List = 'List';

DeclaratorList returns QVTOperational::DeclaratorList:
    {QVTOperational::DeclaratorList}
    
    
          declarator+=Declarator ( "," declarator+=Declarator)*  
    ;

SimpleSignature returns QVTOperational::SimpleSignature:
    {QVTOperational::SimpleSignature}
    
    '('
        ( param_list=ParamList)?
    ')';

ParamList returns QVTOperational::ParamList:
    {QVTOperational::ParamList}
    
    
          param+=VarParameter ( "," param+=VarParameter)*  
    ;

PackageRefGO returns QVTOperational::PackageRefGO:
    {QVTOperational::PackageRefGO}
    
    
         (scoped_identifier=ScopedIdentifier
        ( '(' uri=STRING ')' )? | uri=STRING)
    ;

ConstructorHeader returns QVTOperational::ConstructorHeader:
          (qualifier+=GeneralQualifier)*  
    'constructor'
    
         scoped_identifier=ScopedIdentifier
         simple_signature=SimpleSignature
    ;

enum GeneralQualifier returns QVTOperational::GeneralQualifier:
                blackbox = 'blackbox' | abstract = 'abstract' | static = 'static';

enum PropertyKey returns QVTOperational::PropertyKey:
                derived = 'derived' | literal = 'literal' | configuration = 'configuration' | property = 'property';

HelperHeader returns QVTOperational::HelperHeader:
    
    
         helper_info=HelperInfo
         scope_identifier=ScopedIdentifier
         complete_signature=CompleteSignature
    ;

HelperInfo returns QVTOperational::HelperInfo:
    {QVTOperational::HelperInfo}
    
    
          (qualifier+=GeneralQualifier)*  
         helper_kind=HelperKind
    ;

CompleteSignature returns QVTOperational::CompleteSignature:
    
    
         simple_signature=SimpleSignature
        (':' param_list=ParamList)?
    ;

enum HelperKind returns QVTOperational::HelperKind:
                helper = 'helper' | query = 'query';

LibraryHeader returns QVTOperational::LibraryHeader:
    {QVTOperational::LibraryHeader}
    'library'
    name=ID
    
        ( library_signature=SimpleSignature)?
        ( module_usage=ModuleUsageGO)?
    ;

ModuleUsageGO returns QVTOperational::ModuleUsageGO:
    {QVTOperational::ModuleUsageGO}
    
    
         access_usage=AccessUsage |
         extends_usage=ExtendsUsage
    ;

AccessUsage returns QVTOperational::AccessUsage:
    {QVTOperational::AccessUsage}
    'access'
    
        ( module_kind=ModuleKind)?
          moduleref_list+=ModuleRefGO ( "," moduleref_list+=ModuleRefGO)*  
    ;

ExtendsUsage returns QVTOperational::ExtendsUsage:
    {QVTOperational::ExtendsUsage}
    'extends'
    
        ( module_kind=ModuleKind)?
          moduleref_list+=ModuleRefGO ( "," moduleref_list+=ModuleRefGO)*  
    ;

enum ModuleKind returns QVTOperational::ModuleKind:
                transformation = 'transformation' | library = 'library';

ModuleRefGO returns QVTOperational::ModuleRefGO:
    
    
         scoped_identifier=ScopedIdentifier
        ( simple_signature=SimpleSignature)?
    ;

MappingFullHeader returns QVTOperational::MappingFullHeader:
    
    
         mapping_header=MappingHeader
        ('when' when=ExpressionBlock)?
        ('where' where=ExpressionBlock)?
    ;

MappingHeader returns QVTOperational::MappingHeader:
          (qualifier+=GeneralQualifier)*  
    'mapping'
    
         (param_direction=DirectionKind)?
         scoped_identifier=ScopedIdentifier
         complete_signature=CompleteSignature
          (mapping_extra+=MappingExtra)*  
    ;

MappingExtra returns QVTOperational::MappingExtra:
    {QVTOperational::MappingExtra}
    
    
         mapping_extension=MappingExtension |
         mapping_refinement=MappingRefinement
    ;

MappingExtension returns QVTOperational::MappingExtension:
    
    
         mapping_extension_key=MappingExtensionKey
         scoped_identifier_list=ScopedIdentifierList
    ;

MappingRefinement returns QVTOperational::MappingRefinement:
    
    
        'refines' scoped_identifier=ScopedIdentifier
    ;

enum MappingExtensionKey returns QVTOperational::MappingExtensionKey:
                inherits = 'inherits' | merges = 'merges' | disjuncts = 'disjuncts';

ScopedIdentifierList returns QVTOperational::ScopedIdentifierList:
    {QVTOperational::ScopedIdentifierList}
    
    
          scoped_identifier_list+=ScopedIdentifier ( "," scoped_identifier_list+=ScopedIdentifier)*  
    ;

TransformationHeader returns QVTOperational::TransformationHeader:
          (qualifier+=GeneralQualifier)*  
    'transformation'
    name=ID
    
         transformation_signature=SimpleSignature
        ( transformation_usage_refine=TransformationUsageRefine)?
    ;

TransformationUsageRefine returns QVTOperational::TransformationUsageRefine:
    {QVTOperational::TransformationUsageRefine}
    
    
         module_usage=ModuleUsageGO |
        'refines'  transformation_refine=ModuleRefGO
    ;

MetaModelHeader returns QVTOperational::MetaModelHeader:
    ('metamodel' | 'package')
    
         scoped_identifier=ScopedIdentifier
    ;

MetaModelElement returns QVTOperational::MetaModelElement:
    {QVTOperational::MetaModelElement}
    
    
         classifier=ClassifierGO |
         enumeration=EnumerationGO |
         tag=TagGO
    ;

EnumerationGO returns QVTOperational::EnumerationGO:
    {QVTOperational::EnumerationGO}
    
         enumeration_h=EnumerationHeader ( ';' |
         '{' identifier+=EString ( "," identifier+=EString)* '}'  (';')?)
    ;

EnumerationHeader returns QVTOperational::EnumerationHeader:
    'enum'
    
         identifier=ID
    ;

ClassifierHeader returns QVTOperational::ClassifierHeader:
    
    
         classifier_info=ClassifierInfo
         scoped_identifier=ScopedIdentifier
        ( classifier_extension=ClassifierExtension)?
    ;

ClassifierFeatureList returns QVTOperational::ClassifierFeatureList:
    {QVTOperational::ClassifierFeatureList}
    
    
          classifier_feature+=ClassifierFeature ( ";" classifier_feature+=ClassifierFeature)*   (';')?
    ;

ClassifierInfo returns QVTOperational::ClassifierInfo:
    {QVTOperational::ClassifierInfo}
    'datatype' | 'primitive' | 'exception' | ('intermediate')?
    
          (qualifier+=GeneralQualifier)*   'class'
    ;

ClassifierExtension returns QVTOperational::ClassifierExtension:
    
    
        'extends' scoped_identifier_list=ScopedIdentifierList
    ;

ClassifierFeature returns QVTOperational::ClassifierFeature:
    
    
        (( feature_qualifier=FeatureQualifier)?
         declarator=Declarator
        (( multiplicity=Multiplicity)?
        ( opposite_property=OppositeProperty)?|
         complete_signature=CompleteSignature))|
         tag=TagGO
    ;

FeatureQualifier returns QVTOperational::FeatureQualifier:
    {QVTOperational::FeatureQualifier}
    
    
        ( stereotype_qualifier=StereotypeQualifier)?
          (feature_key+=FeatureKey)*  
    ;

Multiplicity returns QVTOperational::Multiplicity:
    
    '['
         multiplicity_range=MULTIPLICITYRANGE
    ']';

OppositeProperty returns QVTOperational::OppositeProperty:
    {QVTOperational::OppositeProperty}
    'opposites'
    ('~')? name=ID
    
        ( multiplicity=Multiplicity)?
    ;

StereotypeQualifier returns QVTOperational::StereotypeQualifier:
    {QVTOperational::StereotypeQualifier}
    
    
          '<<' identifier+=ID ( "," identifier+=ID)*   '>>'
    ;

enum FeatureKey returns QVTOperational::FeatureKey:
                composes = 'composes' | references = 'references' | readonly = 'readonly' | derived = 'derived' | static = 'static';

UnitRefGO returns QVTOperational::UnitRefGO:
    {QVTOperational::UnitRefGO}
    
    
          identifier+=ID ( "." identifier+=ID)*  
    ;

terminal MULTIPLICITYRANGE:
    INT | '*' | INT '...' INT | INT '...' '*';

