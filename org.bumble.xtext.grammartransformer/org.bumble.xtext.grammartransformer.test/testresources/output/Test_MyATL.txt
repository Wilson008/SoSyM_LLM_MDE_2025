// automatically generated by Xtext
grammar org.xtext.AtlNoOCL with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/gmt/2005/ATLnoOCL" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Root returns Root:
    {Root}
    
    
        ( unit=Unit)?
    ;

Unit returns Unit:
    Library | Query | Module;

ModuleElement returns ModuleElement:
    Helper | MatchedRule_Impl | LazyMatchedRule | CalledRule;

MatchedRule returns MatchedRule:
    MatchedRule_Impl | LazyMatchedRule;

OutPatternElement returns OutPatternElement:
    SimpleOutPatternElement | ForEachOutPatternElement;

Statement returns Statement:
    ExpressionStat | BindingStat | IfStat | ForStat;

InPatternElement returns InPatternElement:
    SimpleInPatternElement;

EString returns ecore::EString:
    STRING | ID;

LibraryRef returns LibraryRef:
    {LibraryRef}
    'uses'
    name=EString ';' 
    
    ;

Library returns Library:
    {Library}
    'library'
    name=EString ';' 
    
          (libraries+=LibraryRef)*  
          (helpers+=Helper)*  
    ;

Query returns Query:
    'query'
    name=EString '=' 
         body=OCLDummy ';' 
    
          (libraries+=LibraryRef)*  
          (helpers+=Helper)*  
    ;

Module returns Module:
    'module'
    name=EString ';'  'create' 
          outModels+=OCLDummy ( "," outModels+=OCLDummy)*  
    (isRefining?= 'refining' | 'from' )?
          inModels+=OCLDummy ( "," inModels+=OCLDummy)*   ';' 
    
          (libraries+=LibraryRef)*  
          (elements+=ModuleElement)*  
    ;

Helper returns Helper:
    'helper'
    
         definition=OCLDummy ';' 
    ;

OCLDummy returns OCLDummy:
    {OCLDummy}
    'OCLDummy'
    ;

EBoolean returns ecore::EBoolean:
    'true' | 'false';

MatchedRule_Impl returns MatchedRule:
    (isNoDefault?= 'nodefault' )?
    (isAbstract?= 'abstract' )?
    (isRefining?= 'refining' )?
    'rule'
    name=EString
        ( 'extends'  superRule=[MatchedRule|EString])?
    '{'
         inPattern=InPattern
        ( 'using'  '{' (variables+=RuleVariableDeclaration)* '}' )?
        ( outPattern=OutPattern)?
        ( actionBlock=ActionBlock)?
    '}';

LazyMatchedRule returns LazyMatchedRule:
    (isUnique?= 'unique' )? 'lazy'
    (isAbstract?= 'abstract' )?
    (isRefining?= 'refining' )?
    'rule'
    name=EString
        ( 'extends'  superRule=[MatchedRule|EString])?
    '{'
         inPattern=InPattern
        ( 'using'  '{' (variables+=RuleVariableDeclaration)* '}' )?
        ( outPattern=OutPattern)?
        ( actionBlock=ActionBlock)?
    '}';

CalledRule returns CalledRule:
    (isEntrypoint?= 'entrypoint' )?
    (isEndpoint?= 'endpoint' )?
    'rule'
    name=EString
        '('(  parameters+=OCLDummy ( "," parameters+=OCLDummy)*  )?')'
    '{'
        ( 'using'  '{' (variables+=RuleVariableDeclaration)* '}' )?
        ( outPattern=OutPattern)?
        ( actionBlock=ActionBlock)?
    '}';

OutPattern returns OutPattern:
    'to'
    
          elements+=OutPatternElement ( "," elements+=OutPatternElement)*  
    ;

ActionBlock returns ActionBlock:
    {ActionBlock}
    'do'
         '{' (statements+=Statement)* '}' 
    ;

RuleVariableDeclaration returns RuleVariableDeclaration:
    {RuleVariableDeclaration}
    
    
        ( varName=EString ':' )?
         type=[OCLDummy|EString] '=' 
         initExpression=[OCLDummy|EString] ';' 
        ( letExp=[OCLDummy|EString])?
        ( baseExp=[OCLDummy|EString])?
    ;

Binding returns Binding:
    
    
         propertyName=EString
 '<-' 
         value=OCLDummy
    ;

SimpleOutPatternElement returns SimpleOutPatternElement:
    {SimpleOutPatternElement}
    
    
        ( varName=EString ':' )?
         type=[OCLDummy|EString]
        ( 'in'  model=[OCLDummy|EString])?
        ( letExp=[OCLDummy|EString])?
        ( baseExp=[OCLDummy|EString])?
        ( 'mapsTo'  sourceElement=[InPatternElement|EString])?
        ( '('   bindings+=Binding ( "," bindings+=Binding)*   ')' )?
    ;

ForEachOutPatternElement returns ForEachOutPatternElement:
    
    
        ( varName=EString ':' )?
         'distinct'  type=[OCLDummy|EString] 'foreach' 
         '(' iterator=OCLDummy 'in' 
         collection=OCLDummy ')'
        ( letExp=[OCLDummy|EString])?
        ( baseExp=[OCLDummy|EString])?
        ( 'mapsTo'  sourceElement=[InPatternElement|EString])?
        (  bindings+=Binding ( "," bindings+=Binding)*  )?
    ;

SimpleInPatternElement returns SimpleInPatternElement:
    
    
        ( varName=EString ':' )?
         type=[OCLDummy|EString]
        ( letExp=[OCLDummy|EString])?
        ( baseExp=[OCLDummy|EString])?
        ( 'in'   models+=[OCLDummy|EString] ( "," models+=[OCLDummy|EString])*  )?
    ;

ExpressionStat returns ExpressionStat:
    
    
         expression=OCLDummy ';' 
    ;

BindingStat returns BindingStat:
    
    
         source=OCLDummy
 '<-' 
         value=OCLDummy ';' 
    ;

IfStat returns IfStat:
    'if'
         '('condition=OCLDummy')'
         thenStatements+=Statement | '{' thenStatements+=Statement* '}' 
           ('else' (elseStatements+=Statement | '{' elseStatements+=Statement* '}' ))?
    ;

ForStat returns ForStat:
    'for' '(' 
         iterator=OCLDummy 'in' 
         collection=OCLDummy ')' 
         '{' (statements+=Statement)* '}' 
    ;

InPattern returns InPattern:
    'from'
    
          elements+=InPatternElement ( "," elements+=InPatternElement)*  
        ( '('filter=OCLDummy')')?
    ;

