// automatically generated by Xtext
grammar org.omg.qvt10.myqvto.MyQvto with org.eclipse.xtext.common.Terminals

import "http://www.schema.omg.org/spec/QVT/1.0/qvtoperational" 
import "http:///emof.ecore" as emof
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

TopLevelGO returns TopLevelGO:
	{TopLevelGO}
	'TopLevelGO'
	'{'
		('unit_element' '{' unit_element+=Module ( "," unit_element+=Module)* '}' )?
		('moduleimport' '{' moduleimport+=ModuleImport ( "," moduleimport+=ModuleImport)* '}' )?
	'}';

Module returns Module:
	Module_Impl | Helper | OperationalTransformation | MappingOperation | Constructor | ContextualProperty | EntryOperation | Library | ModelType | TagGO | MetaModelGO | AccessDecl | TypeDef | ClassifierGO;




Type returns emof::Type:
	Class | DataType_Impl | Enumeration | PrimitiveType;





ExpressionGO returns ExpressionGO:
	ExpressionGO_Impl | ResolveExp_Impl | ResolveInExp | MappingParameter | MappingCallExp | ImperativeCallExp_Impl | ModelParameter | VarParameter_Impl | ObjectExp;


Element returns emof::Element:
	Class | DataType_Impl | Tag | Enumeration | Operation | Package | Parameter | EnumerationLiteral | Property | PrimitiveType | Comment;

NamedElement returns emof::NamedElement:
	Class | DataType_Impl | Enumeration | Operation | Package | Parameter | EnumerationLiteral | Property | PrimitiveType;





VarParameter returns VarParameter:
	VarParameter_Impl | MappingParameter | ModelParameter;

ImperativeOperation returns ImperativeOperation:
	ImperativeOperation_Impl | Helper | MappingOperation | Constructor | ContextualProperty | EntryOperation | TagGO | AccessDecl | TypeDef | ClassifierGO;

OperationBody returns OperationBody:
	OperationBody_Impl | MappingBody | ConstructorBody;



















































Module_Impl returns Module:
	{Module}
	'Module'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('isBlackbox' isBlackbox=Boolean)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('entry' entry=[emof::Operation|EString])?
		('configProperty' '(' configProperty+=[emof::Property|EString] ( "," configProperty+=[emof::Property|EString])* ')' )?
		('usedModelType' '(' usedModelType+=[ModelType|EString] ( "," usedModelType+=[ModelType|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
	'}';

ModuleImport returns ModuleImport:
	'ModuleImport'
	'{'
		('kind' kind=ImportKind)?
		('identifier' '{' identifier+=EString ( "," identifier+=EString)* '}' )?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('binding' '(' binding+=[ModelType|EString] ( "," binding+=[ModelType|EString])* ')' )?
		'importedModule' importedModule=[Module|EString]
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('unit' unit=UnitRefGO)?
	'}';

Tag returns emof::Tag:
	{emof::Tag}
	'Tag'
	'{'
		('value' value=String0)?
		('name' name=String0)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('element' '(' element+=[emof::Element|EString] ( "," element+=[emof::Element|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
	'}';

Comment returns emof::Comment:
	{emof::Comment}
	'Comment'
	'{'
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('annotatedElement' '(' annotatedElement+=[emof::NamedElement|EString] ( "," annotatedElement+=[emof::NamedElement|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
	'}';

String0 returns emof::String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;

Package returns emof::Package:
	{emof::Package}
	'Package'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
	'}';

Operation returns emof::Operation:
	{emof::Operation}
	'Operation'
	'{'
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('name' name=String0)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('type' type=[emof::Type|EString])?
		('raisedException' '(' raisedException+=[emof::Type|EString] ( "," raisedException+=[emof::Type|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
	'}';

Property returns emof::Property:
	{emof::Property}
	'Property'
	'{'
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('name' name=String0)?
		('isReadOnly' isReadOnly=Boolean)?
		('isDerived' isDerived=Boolean)?
		('isComposite' isComposite=Boolean)?
		('isId' isId=Boolean)?
		('default' default=String0)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('type' type=[emof::Type|EString])?
		('opposite' opposite=[emof::Property|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
	'}';

ModelType returns ModelType:
	{ModelType}
	'ModelType'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('isBlackbox' isBlackbox=Boolean)?
		('isAbstract' isAbstract=Boolean)?
		('conformanceKind' conformanceKind=String0)?
		('compliance_kind' compliance_kind=EString)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('entry' entry=[emof::Operation|EString])?
		('configProperty' '(' configProperty+=[emof::Property|EString] ( "," configProperty+=[emof::Property|EString])* ')' )?
		('usedModelType' '(' usedModelType+=[ModelType|EString] ( "," usedModelType+=[ModelType|EString])* ')' )?
		('superClass' '(' superClass+=[emof::Class|EString] ( "," superClass+=[emof::Class|EString])* ')' )?
		('metamodel' '(' metamodel+=[emof::Package|EString] ( "," metamodel+=[emof::Package|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		('ownedAttribute' '{' ownedAttribute+=Property ( "," ownedAttribute+=Property)* '}' )?
		('ownedOperation' '{' ownedOperation+=Operation ( "," ownedOperation+=Operation)* '}' )?
		('additionalCondition' '{' additionalCondition+=ExpressionGO ( "," additionalCondition+=ExpressionGO)* '}' )?
		('packageref_list' '{' packageref_list+=PackageRefGO ( "," packageref_list+=PackageRefGO)* '}' )?
		('modeltype_where' modeltype_where=ExpressionBlock)?
	'}';

Boolean returns emof::Boolean:
	'Boolean' /* TODO: implement this rule and an appropriate IValueConverter */;

ExpressionGO_Impl returns ExpressionGO:
	{ExpressionGO}
	'ExpressionGO'
	'{'
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
	'}';

Helper returns Helper:
	'Helper'
	'{'
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('name' name=String0)?
		('uri' uri=String0)?
		('isBlackbox' isBlackbox=Boolean)?
		('isQuery' isQuery=Boolean)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('type' type=[emof::Type|EString])?
		('raisedException' '(' raisedException+=[emof::Type|EString] ( "," raisedException+=[emof::Type|EString])* ')' )?
		('overridden' overridden=[ImperativeOperation|EString])?
		('entry' entry=[emof::Operation|EString])?
		('configProperty' '(' configProperty+=[emof::Property|EString] ( "," configProperty+=[emof::Property|EString])* ')' )?
		('usedModelType' '(' usedModelType+=[ModelType|EString] ( "," usedModelType+=[ModelType|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		('body' body=OperationBody)?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		'helper_header' helper_header=HelperHeader
		('expression' expression=ExpressionGO)?
		('expression_block' expression_block=ExpressionBlock)?
	'}';

OperationalTransformation returns OperationalTransformation:
	'OperationalTransformation'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('isBlackbox' isBlackbox=Boolean)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('entry' entry=[emof::Operation|EString])?
		('configProperty' '(' configProperty+=[emof::Property|EString] ( "," configProperty+=[emof::Property|EString])* ')' )?
		('usedModelType' '(' usedModelType+=[ModelType|EString] ( "," usedModelType+=[ModelType|EString])* ')' )?
		('intermediateClass' '(' intermediateClass+=[emof::Class|EString] ( "," intermediateClass+=[emof::Class|EString])* ')' )?
		('refined' refined=[ExpressionGO|EString])?
		('intermediateProperty' '(' intermediateProperty+=[emof::Property|EString] ( "," intermediateProperty+=[emof::Property|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		('modelParameter' '{' modelParameter+=ModelParameter ( "," modelParameter+=ModelParameter)* '}' )?
		('relation' '{' relation+=ExpressionGO ( "," relation+=ExpressionGO)* '}' )?
		'transformation_h' transformation_h=TransformationHeader
		('module_element' '{' module_element+=ImperativeOperation ( "," module_element+=ImperativeOperation)* '}' )?
	'}';

MappingOperation returns MappingOperation:
	'MappingOperation'
	'{'
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('name' name=String0)?
		('uri' uri=String0)?
		('isBlackbox' isBlackbox=Boolean)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('type' type=[emof::Type|EString])?
		('raisedException' '(' raisedException+=[emof::Type|EString] ( "," raisedException+=[emof::Type|EString])* ')' )?
		('overridden' overridden=[ImperativeOperation|EString])?
		('entry' entry=[emof::Operation|EString])?
		('configProperty' '(' configProperty+=[emof::Property|EString] ( "," configProperty+=[emof::Property|EString])* ')' )?
		('usedModelType' '(' usedModelType+=[ModelType|EString] ( "," usedModelType+=[ModelType|EString])* ')' )?
		('disjunct' '(' disjunct+=[MappingOperation|EString] ( "," disjunct+=[MappingOperation|EString])* ')' )?
		('refinedRelation' refinedRelation=[ExpressionGO|EString])?
		('merged' '(' merged+=[MappingOperation|EString] ( "," merged+=[MappingOperation|EString])* ')' )?
		('inherited' '(' inherited+=[MappingOperation|EString] ( "," inherited+=[MappingOperation|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		('body' body=OperationBody)?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		('when' '{' when+=ExpressionGO ( "," when+=ExpressionGO)* '}' )?
		('where' '{' where+=ExpressionGO ( "," where+=ExpressionGO)* '}' )?
		'mapping_full_header' mapping_full_header=MappingFullHeader
		('mapping_body' mapping_body=MappingBody)?
	'}';

Constructor returns Constructor:
	'Constructor'
	'{'
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('name' name=String0)?
		('uri' uri=String0)?
		('isBlackbox' isBlackbox=Boolean)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('type' type=[emof::Type|EString])?
		('raisedException' '(' raisedException+=[emof::Type|EString] ( "," raisedException+=[emof::Type|EString])* ')' )?
		('overridden' overridden=[ImperativeOperation|EString])?
		('entry' entry=[emof::Operation|EString])?
		('configProperty' '(' configProperty+=[emof::Property|EString] ( "," configProperty+=[emof::Property|EString])* ')' )?
		('usedModelType' '(' usedModelType+=[ModelType|EString] ( "," usedModelType+=[ModelType|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		('body' body=OperationBody)?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		'constructor_header' constructor_header=ConstructorHeader
		('expression_block' expression_block=ExpressionBlock)?
	'}';

ContextualProperty returns ContextualProperty:
	'ContextualProperty'
	'{'
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('name' name=String0)?
		('uri' uri=String0)?
		('isBlackbox' isBlackbox=Boolean)?
		'property_key' '{' property_key+=PropertyKey ( "," property_key+=PropertyKey)* '}' 
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('type' type=[emof::Type|EString])?
		('raisedException' '(' raisedException+=[emof::Type|EString] ( "," raisedException+=[emof::Type|EString])* ')' )?
		('overridden' overridden=[ImperativeOperation|EString])?
		('entry' entry=[emof::Operation|EString])?
		('configProperty' '(' configProperty+=[emof::Property|EString] ( "," configProperty+=[emof::Property|EString])* ')' )?
		('usedModelType' '(' usedModelType+=[ModelType|EString] ( "," usedModelType+=[ModelType|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		('body' body=OperationBody)?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		('initExpression' initExpression=ExpressionGO)?
		'declarator' declarator=Declarator
	'}';

EntryOperation returns EntryOperation:
	'EntryOperation'
	'{'
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('name' name=String0)?
		('uri' uri=String0)?
		('isBlackbox' isBlackbox=Boolean)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('type' type=[emof::Type|EString])?
		('raisedException' '(' raisedException+=[emof::Type|EString] ( "," raisedException+=[emof::Type|EString])* ')' )?
		('overridden' overridden=[ImperativeOperation|EString])?
		('entry' entry=[emof::Operation|EString])?
		('configProperty' '(' configProperty+=[emof::Property|EString] ( "," configProperty+=[emof::Property|EString])* ')' )?
		('usedModelType' '(' usedModelType+=[ModelType|EString] ( "," usedModelType+=[ModelType|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		('body' body=OperationBody)?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		'entry_header' entry_header=EntryHeader
		('expression_block' expression_block=ExpressionBlock)?
	'}';

Library returns Library:
	'Library'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('isBlackbox' isBlackbox=Boolean)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('entry' entry=[emof::Operation|EString])?
		('configProperty' '(' configProperty+=[emof::Property|EString] ( "," configProperty+=[emof::Property|EString])* ')' )?
		('usedModelType' '(' usedModelType+=[ModelType|EString] ( "," usedModelType+=[ModelType|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		'library_h' library_h=LibraryHeader
		('module_element' '{' module_element+=ImperativeOperation ( "," module_element+=ImperativeOperation)* '}' )?
	'}';

TagGO returns TagGO:
	'TagGO'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('isBlackbox' isBlackbox=Boolean)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		'tagid' tagid=EString
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('entry' entry=[emof::Operation|EString])?
		('configProperty' '(' configProperty+=[emof::Property|EString] ( "," configProperty+=[emof::Property|EString])* ')' )?
		('usedModelType' '(' usedModelType+=[ModelType|EString] ( "," usedModelType+=[ModelType|EString])* ')' )?
		('type' type=[emof::Type|EString])?
		('raisedException' '(' raisedException+=[emof::Type|EString] ( "," raisedException+=[emof::Type|EString])* ')' )?
		('overridden' overridden=[ImperativeOperation|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		('body' body=OperationBody)?
		'scoped_identifier' scoped_identifier=ScopedIdentifier
		('tagvalue' tagvalue=ExpressionGO)?
	'}';

MetaModelGO returns MetaModelGO:
	'MetaModelGO'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('isBlackbox' isBlackbox=Boolean)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('entry' entry=[emof::Operation|EString])?
		('configProperty' '(' configProperty+=[emof::Property|EString] ( "," configProperty+=[emof::Property|EString])* ')' )?
		('usedModelType' '(' usedModelType+=[ModelType|EString] ( "," usedModelType+=[ModelType|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		'metamodel_h' metamodel_h=MetaModelHeader
		('metamodel_element' '{' metamodel_element+=MetaModelElement ( "," metamodel_element+=MetaModelElement)* '}' )?
	'}';

AccessDecl returns AccessDecl:
	'AccessDecl'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('isBlackbox' isBlackbox=Boolean)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('entry' entry=[emof::Operation|EString])?
		('configProperty' '(' configProperty+=[emof::Property|EString] ( "," configProperty+=[emof::Property|EString])* ')' )?
		('usedModelType' '(' usedModelType+=[ModelType|EString] ( "," usedModelType+=[ModelType|EString])* ')' )?
		('type' type=[emof::Type|EString])?
		('raisedException' '(' raisedException+=[emof::Type|EString] ( "," raisedException+=[emof::Type|EString])* ')' )?
		('overridden' overridden=[ImperativeOperation|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		('body' body=OperationBody)?
		'access_usage' access_usage=AccessUsage
	'}';

TypeDef returns TypeDef:
	'TypeDef'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('isBlackbox' isBlackbox=Boolean)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('entry' entry=[emof::Operation|EString])?
		('configProperty' '(' configProperty+=[emof::Property|EString] ( "," configProperty+=[emof::Property|EString])* ')' )?
		('usedModelType' '(' usedModelType+=[ModelType|EString] ( "," usedModelType+=[ModelType|EString])* ')' )?
		('type' type=[emof::Type|EString])?
		('raisedException' '(' raisedException+=[emof::Type|EString] ( "," raisedException+=[emof::Type|EString])* ')' )?
		('overridden' overridden=[ImperativeOperation|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		('body' body=OperationBody)?
		'typespec' typespec=TypeSpec
		('typedef_condition' typedef_condition=ExpressionGO)?
	'}';

ClassifierGO returns ClassifierGO:
	'ClassifierGO'
	'{'
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('name' name=String0)?
		('uri' uri=String0)?
		('isBlackbox' isBlackbox=Boolean)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('type' type=[emof::Type|EString])?
		('raisedException' '(' raisedException+=[emof::Type|EString] ( "," raisedException+=[emof::Type|EString])* ')' )?
		('overridden' overridden=[ImperativeOperation|EString])?
		('entry' entry=[emof::Operation|EString])?
		('configProperty' '(' configProperty+=[emof::Property|EString] ( "," configProperty+=[emof::Property|EString])* ')' )?
		('usedModelType' '(' usedModelType+=[ModelType|EString] ( "," usedModelType+=[ModelType|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		('body' body=OperationBody)?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		'classifier_h' classifier_h=ClassifierHeader
		('classifier_feature_list' classifier_feature_list=ClassifierFeatureList)?
	'}';

Class returns emof::Class:
	{emof::Class}
	'Class'
	'{'
		('name' name=String0)?
		('isAbstract' isAbstract=Boolean)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('superClass' '(' superClass+=[emof::Class|EString] ( "," superClass+=[emof::Class|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedAttribute' '{' ownedAttribute+=Property ( "," ownedAttribute+=Property)* '}' )?
		('ownedOperation' '{' ownedOperation+=Operation ( "," ownedOperation+=Operation)* '}' )?
	'}';

DataType_Impl returns emof::DataType:
	{emof::DataType}
	'DataType'
	'{'
		('name' name=String0)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
	'}';

Enumeration returns emof::Enumeration:
	{emof::Enumeration}
	'Enumeration'
	'{'
		('name' name=String0)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedLiteral' '{' ownedLiteral+=EnumerationLiteral ( "," ownedLiteral+=EnumerationLiteral)* '}' )?
	'}';

Parameter returns emof::Parameter:
	{emof::Parameter}
	'Parameter'
	'{'
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('name' name=String0)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('type' type=[emof::Type|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
	'}';

EnumerationLiteral returns emof::EnumerationLiteral:
	{emof::EnumerationLiteral}
	'EnumerationLiteral'
	'{'
		('name' name=String0)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
	'}';

PrimitiveType returns emof::PrimitiveType:
	{emof::PrimitiveType}
	'PrimitiveType'
	'{'
		('name' name=String0)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
	'}';

Integer returns emof::Integer:
	'Integer' /* TODO: implement this rule and an appropriate IValueConverter */;

UnlimitedNatural returns emof::UnlimitedNatural:
	'UnlimitedNatural' /* TODO: implement this rule and an appropriate IValueConverter */;

EString returns ecore::EString:
	STRING | ID;

PackageRefGO returns PackageRefGO:
	{PackageRefGO}
	'PackageRefGO'
	'{'
		('uri' uri=EString)?
		('scoped_identifier' scoped_identifier=ScopedIdentifier)?
	'}';

ExpressionBlock returns ExpressionBlock:
	{ExpressionBlock}
	'ExpressionBlock'
	'{'
		('expression_list' expression_list=ExpressionList)?
	'}';

ScopedIdentifier returns ScopedIdentifier:
	{ScopedIdentifier}
	'ScopedIdentifier'
	'{'
		('identifier' '{' identifier+=EString ( "," identifier+=EString)* '}' )?
	'}';

ExpressionList returns ExpressionList:
	'ExpressionList'
	'{'
		'expression_semi_list' expression_semi_list=ExpressionSemiList
	'}';

ExpressionSemiList returns ExpressionSemiList:
	{ExpressionSemiList}
	'ExpressionSemiList'
	'{'
		('expression' '{' expression+=ExpressionGO ( "," expression+=ExpressionGO)* '}' )?
	'}';

ResolveExp_Impl returns ResolveExp:
	{ResolveExp}
	'ResolveExp'
	'{'
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
		('one' one=Boolean)?
		('isInverse' isInverse=Boolean)?
		('isDeferred' isDeferred=Boolean)?
		('target' target=ExpressionGO)?
		('condition' condition=ExpressionGO)?
	'}';

ResolveInExp returns ResolveInExp:
	{ResolveInExp}
	'ResolveInExp'
	'{'
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
		('one' one=Boolean)?
		('isInverse' isInverse=Boolean)?
		('isDeferred' isDeferred=Boolean)?
		('inMapping' inMapping=[MappingOperation|EString])?
		('target' target=ExpressionGO)?
		('condition' condition=ExpressionGO)?
	'}';

MappingParameter returns MappingParameter:
	'MappingParameter'
	'{'
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('name' name=String0)?
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
		('kind' kind=DirectionKind)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('type' type=[emof::Type|EString])?
		('refinedDomain' refinedDomain=[ExpressionGO|EString])?
		('extent' extent=[ModelParameter|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		'declarator' declarator=Declarator
	'}';

MappingCallExp returns MappingCallExp:
	{MappingCallExp}
	'MappingCallExp'
	'{'
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
		('isVirtual' isVirtual=Boolean)?
		('isStrict' isStrict=Boolean)?
	'}';

ImperativeCallExp_Impl returns ImperativeCallExp:
	{ImperativeCallExp}
	'ImperativeCallExp'
	'{'
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
		('isVirtual' isVirtual=Boolean)?
	'}';

ModelParameter returns ModelParameter:
	'ModelParameter'
	'{'
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('name' name=String0)?
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
		('kind' kind=DirectionKind)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('type' type=[emof::Type|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		'declarator' declarator=Declarator
	'}';

VarParameter_Impl returns VarParameter:
	'VarParameter'
	'{'
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('name' name=String0)?
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
		('kind' kind=DirectionKind)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('type' type=[emof::Type|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		'declarator' declarator=Declarator
	'}';

ObjectExp returns ObjectExp:
	'ObjectExp'
	'{'
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
		'referredObject' referredObject=[ExpressionGO|EString]
		'body' body=ConstructorBody
	'}';

enum DirectionKind returns DirectionKind:
				in = 'in' | inout = 'inout' | out = 'out';

Declarator returns Declarator:
	'Declarator'
	'{'
		'typespec' typespec=TypeSpec
		('init_part' init_part=InitPart)?
		('scoped_identifier' scoped_identifier=ScopedIdentifier)?
	'}';

TypeSpec returns TypeSpec:
	'TypeSpec'
	'{'
		('extent_location' extent_location=EString)?
		'type_reference' type_reference=TypeReference
	'}';

InitPart returns InitPart:
	'InitPart'
	'{'
		'init_op' init_op=EString
		'expression' expression=ExpressionGO
	'}';

TypeReference returns TypeReference:
	{TypeReference}
	'TypeReference'
	'{'
		('scoped_identifier' scoped_identifier=ScopedIdentifier)?
		('complex_type' complex_type=ComplexType)?
	'}';

ComplexType returns ComplexType:
	{ComplexType}
	'ComplexType'
	'{'
		('complex_type_key' complex_type_key=ComplexTypeKey)?
		('collection_key' collection_key=CollectionKey)?
		('typespec' '{' typespec+=TypeSpec ( "," typespec+=TypeSpec)* '}' )?
		('declarator_list' declarator_list=DeclaratorList)?
	'}';

enum ComplexTypeKey returns ComplexTypeKey:
				Collection = 'Collection' | Set = 'Set' | OrderedSet = 'OrderedSet' | Sequence = 'Sequence' | Bag = 'Bag' | List = 'List' | Dict = 'Dict' | Tuple = 'Tuple';

enum CollectionKey returns CollectionKey:
				Collection = 'Collection' | Set = 'Set' | OrderedSet = 'OrderedSet' | Sequence = 'Sequence' | Bag = 'Bag' | List = 'List';

DeclaratorList returns DeclaratorList:
	{DeclaratorList}
	'DeclaratorList'
	'{'
		('declarator' '{' declarator+=Declarator ( "," declarator+=Declarator)* '}' )?
	'}';

ConstructorBody returns ConstructorBody:
	{ConstructorBody}
	'ConstructorBody'
	'{'
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('content' '{' content+=ExpressionGO ( "," content+=ExpressionGO)* '}' )?
		('variable' '{' variable+=ExpressionGO ( "," variable+=ExpressionGO)* '}' )?
	'}';

ImperativeOperation_Impl returns ImperativeOperation:
	{ImperativeOperation}
	'ImperativeOperation'
	'{'
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('name' name=String0)?
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('type' type=[emof::Type|EString])?
		('raisedException' '(' raisedException+=[emof::Type|EString] ( "," raisedException+=[emof::Type|EString])* ')' )?
		('overridden' overridden=[ImperativeOperation|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		('body' body=OperationBody)?
	'}';

OperationBody_Impl returns OperationBody:
	{OperationBody}
	'OperationBody'
	'{'
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('content' '{' content+=ExpressionGO ( "," content+=ExpressionGO)* '}' )?
		('variable' '{' variable+=ExpressionGO ( "," variable+=ExpressionGO)* '}' )?
	'}';

HelperHeader returns HelperHeader:
	'HelperHeader'
	'{'
		'helper_info' helper_info=HelperInfo
		'scope_identifier' scope_identifier=ScopedIdentifier
		'complete_signature' complete_signature=CompleteSignature
	'}';

MappingBody returns MappingBody:
	{MappingBody}
	'MappingBody'
	'{'
		('tag' '(' tag+=[emof::Tag|EString] ( "," tag+=[emof::Tag|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('content' '{' content+=ExpressionGO ( "," content+=ExpressionGO)* '}' )?
		('variable' '{' variable+=ExpressionGO ( "," variable+=ExpressionGO)* '}' )?
		('initSection' '{' initSection+=ExpressionGO ( "," initSection+=ExpressionGO)* '}' )?
		('endSection' '{' endSection+=ExpressionGO ( "," endSection+=ExpressionGO)* '}' )?
		('population_section' population_section=PopulationSection)?
	'}';

PopulationSection returns PopulationSection:
	{PopulationSection}
	'PopulationSection'
	'{'
		('expression_list' expression_list=ExpressionList)?
		('expression_block' expression_block=ExpressionBlock)?
	'}';

HelperInfo returns HelperInfo:
	{HelperInfo}
	'HelperInfo'
	'{'
		('qualifier' '{' qualifier+=GeneralQualifier ( "," qualifier+=GeneralQualifier)* '}' )?
		('helper_kind' helper_kind=HelperKind)?
	'}';

CompleteSignature returns CompleteSignature:
	'CompleteSignature'
	'{'
		'simple_signature' simple_signature=SimpleSignature
		('param_list' param_list=ParamList)?
	'}';

enum GeneralQualifier returns GeneralQualifier:
				blackbox = 'blackbox' | abstract = 'abstract' | static = 'static';

enum HelperKind returns HelperKind:
				helper = 'helper' | query = 'query';

SimpleSignature returns SimpleSignature:
	{SimpleSignature}
	'SimpleSignature'
	'{'
		('param_list' param_list=ParamList)?
	'}';

ParamList returns ParamList:
	{ParamList}
	'ParamList'
	'{'
		('param' '{' param+=VarParameter ( "," param+=VarParameter)* '}' )?
	'}';

TransformationHeader returns TransformationHeader:
	'TransformationHeader'
	name=EString
	'{'
		('qualifier' '{' qualifier+=GeneralQualifier ( "," qualifier+=GeneralQualifier)* '}' )?
		'transformation_signature' transformation_signature=SimpleSignature
		('transformation_usage_refine' transformation_usage_refine=TransformationUsageRefine)?
	'}';

TransformationUsageRefine returns TransformationUsageRefine:
	{TransformationUsageRefine}
	'TransformationUsageRefine'
	'{'
		('module_usage' module_usage=ModuleUsageGO)?
		('transformation_refine' transformation_refine=ModuleRefGO)?
	'}';

ModuleUsageGO returns ModuleUsageGO:
	{ModuleUsageGO}
	'ModuleUsageGO'
	'{'
		('access_usage' access_usage=AccessUsage)?
		('extends_usage' extends_usage=ExtendsUsage)?
	'}';

ModuleRefGO returns ModuleRefGO:
	'ModuleRefGO'
	'{'
		'scoped_identifier' scoped_identifier=ScopedIdentifier
		('simple_signature' simple_signature=SimpleSignature)?
	'}';

AccessUsage returns AccessUsage:
	{AccessUsage}
	'AccessUsage'
	'{'
		('module_kind' module_kind=ModuleKind)?
		('moduleref_list' '{' moduleref_list+=ModuleRefGO ( "," moduleref_list+=ModuleRefGO)* '}' )?
	'}';

ExtendsUsage returns ExtendsUsage:
	{ExtendsUsage}
	'ExtendsUsage'
	'{'
		('module_kind' module_kind=ModuleKind)?
		('moduleref_list' '{' moduleref_list+=ModuleRefGO ( "," moduleref_list+=ModuleRefGO)* '}' )?
	'}';

enum ModuleKind returns ModuleKind:
				transformation = 'transformation' | library = 'library';

MappingFullHeader returns MappingFullHeader:
	'MappingFullHeader'
	'{'
		'mapping_header' mapping_header=MappingHeader
		('when' when=ExpressionBlock)?
		('where' where=ExpressionBlock)?
	'}';

MappingHeader returns MappingHeader:
	'MappingHeader'
	'{'
		('qualifier' '{' qualifier+=GeneralQualifier ( "," qualifier+=GeneralQualifier)* '}' )?
		('param_direction' param_direction=DirectionKind)?
		'scoped_identifier' scoped_identifier=ScopedIdentifier
		'complete_signature' complete_signature=CompleteSignature
		('mapping_extra' '{' mapping_extra+=MappingExtra ( "," mapping_extra+=MappingExtra)* '}' )?
	'}';

MappingExtra returns MappingExtra:
	{MappingExtra}
	'MappingExtra'
	'{'
		('mapping_extension' mapping_extension=MappingExtension)?
		('mapping_refinement' mapping_refinement=MappingRefinement)?
	'}';

MappingExtension returns MappingExtension:
	'MappingExtension'
	'{'
		'mapping_extension_key' mapping_extension_key=MappingExtensionKey
		'scoped_identifier_list' scoped_identifier_list=ScopedIdentifierList
	'}';

MappingRefinement returns MappingRefinement:
	'MappingRefinement'
	'{'
		'scoped_identifier' scoped_identifier=ScopedIdentifier
	'}';

enum MappingExtensionKey returns MappingExtensionKey:
				inherits = 'inherits' | merges = 'merges' | disjuncts = 'disjuncts';

ScopedIdentifierList returns ScopedIdentifierList:
	{ScopedIdentifierList}
	'ScopedIdentifierList'
	'{'
		('scoped_identifier_list' '{' scoped_identifier_list+=ScopedIdentifier ( "," scoped_identifier_list+=ScopedIdentifier)* '}' )?
	'}';

ConstructorHeader returns ConstructorHeader:
	'ConstructorHeader'
	'{'
		('qualifier' '{' qualifier+=GeneralQualifier ( "," qualifier+=GeneralQualifier)* '}' )?
		'scoped_identifier' scoped_identifier=ScopedIdentifier
		'simple_signature' simple_signature=SimpleSignature
	'}';

enum PropertyKey returns PropertyKey:
				derived = 'derived' | literal = 'literal' | configuration = 'configuration' | property = 'property';

EntryHeader returns EntryHeader:
	'EntryHeader'
	'{'
		'simple_signature' simple_signature=SimpleSignature
	'}';

LibraryHeader returns LibraryHeader:
	{LibraryHeader}
	'LibraryHeader'
	name=EString
	'{'
		('library_signature' library_signature=SimpleSignature)?
		('module_usage' module_usage=ModuleUsageGO)?
	'}';

MetaModelHeader returns MetaModelHeader:
	'MetaModelHeader'
	'{'
		'scoped_identifier' scoped_identifier=ScopedIdentifier
	'}';

MetaModelElement returns MetaModelElement:
	{MetaModelElement}
	'MetaModelElement'
	'{'
		('classifier' classifier=ClassifierGO)?
		('enumeration' enumeration=EnumerationGO)?
		('tag' tag=TagGO)?
	'}';

EnumerationGO returns EnumerationGO:
	{EnumerationGO}
	'EnumerationGO'
	'{'
		('identifier' '{' identifier+=EString ( "," identifier+=EString)* '}' )?
		('enumeration_h' enumeration_h=EnumerationHeader)?
	'}';

EnumerationHeader returns EnumerationHeader:
	'EnumerationHeader'
	'{'
		'identifier' identifier=EString
	'}';

ClassifierHeader returns ClassifierHeader:
	'ClassifierHeader'
	'{'
		'classifier_info' classifier_info=ClassifierInfo
		'scoped_identifier' scoped_identifier=ScopedIdentifier
		('classifier_extension' classifier_extension=ClassifierExtension)?
	'}';

ClassifierFeatureList returns ClassifierFeatureList:
	{ClassifierFeatureList}
	'ClassifierFeatureList'
	'{'
		('classifier_feature' '{' classifier_feature+=ClassifierFeature ( "," classifier_feature+=ClassifierFeature)* '}' )?
	'}';

ClassifierInfo returns ClassifierInfo:
	{ClassifierInfo}
	'ClassifierInfo'
	'{'
		('qualifier' '{' qualifier+=GeneralQualifier ( "," qualifier+=GeneralQualifier)* '}' )?
	'}';

ClassifierExtension returns ClassifierExtension:
	'ClassifierExtension'
	'{'
		'scoped_identifier_list' scoped_identifier_list=ScopedIdentifierList
	'}';

ClassifierFeature returns ClassifierFeature:
	'ClassifierFeature'
	'{'
		('feature_qualifier' feature_qualifier=FeatureQualifier)?
		'declarator' declarator=Declarator
		('multiplicity' multiplicity=Multiplicity)?
		('opposite_property' opposite_property=OppositeProperty)?
		('complete_signature' complete_signature=CompleteSignature)?
		('tag' tag=TagGO)?
	'}';

FeatureQualifier returns FeatureQualifier:
	{FeatureQualifier}
	'FeatureQualifier'
	'{'
		('feature_key' '{' feature_key+=FeatureKey ( "," feature_key+=FeatureKey)* '}' )?
		('stereotype_qualifier' stereotype_qualifier=StereotypeQualifier)?
	'}';

Multiplicity returns Multiplicity:
	'Multiplicity'
	'{'
		'multiplicity_range' multiplicity_range=EString
	'}';

OppositeProperty returns OppositeProperty:
	{OppositeProperty}
	'OppositeProperty'
	name=EString
	'{'
		('multiplicity' multiplicity=Multiplicity)?
	'}';

StereotypeQualifier returns StereotypeQualifier:
	{StereotypeQualifier}
	'StereotypeQualifier'
	'{'
		('identifier' '{' identifier+=EString ( "," identifier+=EString)* '}' )?
	'}';

enum FeatureKey returns FeatureKey:
				composes = 'composes' | references = 'references' | readonly = 'readonly' | derived = 'derived' | static = 'static';

enum ImportKind returns ImportKind:
				extension = 'extension' | access = 'access';

UnitRefGO returns UnitRefGO:
	{UnitRefGO}
	'UnitRefGO'
	'{'
		('identifier' '{' identifier+=EString ( "," identifier+=EString)* '}' )?
	'}';
