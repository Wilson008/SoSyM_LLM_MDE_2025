// automatically generated by Xtext
grammar org.xtext.example.myspectra.MySpectra with org.eclipse.xtext.common.Terminals

import "http://smlab.cs.tau.ac.il/syntech/Spectra" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	'Model'
	name=EString
	'{'
		('imports' '{' imports+=Import ( "," imports+=Import)* '}' )?
		('elements' '{' elements+=Decl ( "," elements+=Decl)* '}' )?
	'}';


Decl returns Decl:
	Decl_Impl | WeightDef | Var | TypeDef | Define | DefineRegExp | Counter | Monitor | Pattern | Predicate | LTLGar | LTLAsm | EXGar;

TemporalExpression returns TemporalExpression:
	TemporalExpression_Impl | TemporalInExpr | TemporalImpExpr | TemporalIffExpr | TemporalOrExpr | TemporalAndExpr | TemporalRelationalExpr | TemporalRemainderExpr | TemporalAdditiveExpr | TemporalMultiplicativeExpr | TemporalBinaryExpr | TemporalUnaryExpr | TemporalPrimaryExpr | Constant | QuantifierExpr;









RegExp returns RegExp:
	RegExp_Impl | BinaryRegExp | UnaryRegExp | CompRegExp;


PredicateOrPatternReferrable returns PredicateOrPatternReferrable:
	PredicateOrPatternReferrable_Impl | Pattern | Predicate;

Referrable returns Referrable:
	Referrable_Impl | VarDecl | TypeConstant | DefineDecl | DefineRegExpDecl | PatternParam | TypedParam | Counter | Monitor | DomainVarDecl;









Import returns Import:
	{Import}
	'Import'
	'{'
		('importURI' importURI=EString)?
	'}';

EString returns ecore::EString:
	STRING | ID;

Decl_Impl returns Decl:
	{Decl}
	'Decl'
	;

WeightDef returns WeightDef:
	{WeightDef}
	'WeightDef'
	name=EString
	'{'
		('negative' negative=EString)?
		('value' value=EInt)?
		('definition' definition=TemporalExpression)?
	'}';

Var returns Var:
	{Var}
	'Var'
	'{'
		('kind' kind=VarOwner)?
		('var' var=VarDecl)?
	'}';

TypeDef returns TypeDef:
	{TypeDef}
	'TypeDef'
	name=EString
	'{'
		('type' type=VarType)?
	'}';

Define returns Define:
	{Define}
	'Define'
	'{'
		('defineList' '{' defineList+=DefineDecl ( "," defineList+=DefineDecl)* '}' )?
	'}';

DefineRegExp returns DefineRegExp:
	{DefineRegExp}
	'DefineRegExp'
	'{'
		('defineRegsList' '{' defineRegsList+=DefineRegExpDecl ( "," defineRegsList+=DefineRegExpDecl)* '}' )?
	'}';

Counter returns Counter:
	{Counter}
	'Counter'
	name=EString
	'{'
		('overflowMethod' '{' overflowMethod+=OverflowMethod ( "," overflowMethod+=OverflowMethod)* '}' )?
		('underflowMethod' '{' underflowMethod+=OverflowMethod ( "," underflowMethod+=OverflowMethod)* '}' )?
		('range' range=Subrange)?
		('initial' '{' initial+=TemporalExpression ( "," initial+=TemporalExpression)* '}' )?
		('resetPred' '{' resetPred+=TemporalExpression ( "," resetPred+=TemporalExpression)* '}' )?
		('incPred' '{' incPred+=TemporalExpression ( "," incPred+=TemporalExpression)* '}' )?
		('decPred' '{' decPred+=TemporalExpression ( "," decPred+=TemporalExpression)* '}' )?
	'}';

Monitor returns Monitor:
	{Monitor}
	'Monitor'
	name=EString
	'{'
		('type' type=VarType)?
		('initial' '{' initial+=TemporalExpression ( "," initial+=TemporalExpression)* '}' )?
		('safety' '{' safety+=TemporalExpression ( "," safety+=TemporalExpression)* '}' )?
		('stateInv' '{' stateInv+=TemporalExpression ( "," stateInv+=TemporalExpression)* '}' )?
	'}';

Pattern returns Pattern:
	{Pattern}
	'Pattern'
	name=EString
	'{'
		('params' params=PatternParamList)?
		('varDeclList' '{' varDeclList+=VarDecl ( "," varDeclList+=VarDecl)* '}' )?
		('initial' '{' initial+=TemporalExpression ( "," initial+=TemporalExpression)* '}' )?
		('safety' '{' safety+=TemporalExpression ( "," safety+=TemporalExpression)* '}' )?
		('stateInv' '{' stateInv+=TemporalExpression ( "," stateInv+=TemporalExpression)* '}' )?
		('justice' '{' justice+=TemporalExpression ( "," justice+=TemporalExpression)* '}' )?
	'}';

Predicate returns Predicate:
	{Predicate}
	'Predicate'
	name=EString
	'{'
		('params' params=TypedParamList)?
		('body' body=TemporalExpression)?
	'}';

LTLGar returns LTLGar:
	{LTLGar}
	'LTLGar'
	name=EString
	'{'
		('safety' safety=EString)?
		('stateInv' stateInv=EString)?
		('justice' justice=EString)?
		('params' params=TypedParamList)?
		('temporalExpr' temporalExpr=TemporalExpression)?
		('trig' trig=Trigger)?
	'}';

LTLAsm returns LTLAsm:
	{LTLAsm}
	'LTLAsm'
	name=EString
	'{'
		('safety' safety=EString)?
		('stateInv' stateInv=EString)?
		('justice' justice=EString)?
		('params' params=TypedParamList)?
		('temporalExpr' temporalExpr=TemporalExpression)?
		('trig' trig=Trigger)?
	'}';

EXGar returns EXGar:
	{EXGar}
	'EXGar'
	name=EString
	'{'
		('regExpPointer' regExpPointer=[DefineRegExpDecl|EString])?
		('elements' '{' elements+=TemporalExpression ( "," elements+=TemporalExpression)* '}' )?
		('regExp' regExp=RegExp)?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

TemporalExpression_Impl returns TemporalExpression:
	{TemporalExpression}
	'TemporalExpression'
	;

TemporalInExpr returns TemporalInExpr:
	{TemporalInExpr}
	(not?='not')?
	'TemporalInExpr'
	'{'
		('operator' operator=EString)?
		('left' left=TemporalExpression)?
		('values' '{' values+=ValueInRange ( "," values+=ValueInRange)* '}' )?
	'}';

TemporalImpExpr returns TemporalImpExpr:
	{TemporalImpExpr}
	'TemporalImpExpr'
	'{'
		('operator' operator=EString)?
		('left' left=TemporalExpression)?
		('implication' implication=TemporalExpression)?
	'}';

TemporalIffExpr returns TemporalIffExpr:
	{TemporalIffExpr}
	'TemporalIffExpr'
	'{'
		('operator' operator=EString)?
		('elements' '{' elements+=TemporalExpression ( "," elements+=TemporalExpression)* '}' )?
	'}';

TemporalOrExpr returns TemporalOrExpr:
	{TemporalOrExpr}
	'TemporalOrExpr'
	'{'
		('operator' '{' operator+=EString ( "," operator+=EString)* '}' )?
		('elements' '{' elements+=TemporalExpression ( "," elements+=TemporalExpression)* '}' )?
	'}';

TemporalAndExpr returns TemporalAndExpr:
	{TemporalAndExpr}
	'TemporalAndExpr'
	'{'
		('operator' '{' operator+=EString ( "," operator+=EString)* '}' )?
		('elements' '{' elements+=TemporalExpression ( "," elements+=TemporalExpression)* '}' )?
	'}';

TemporalRelationalExpr returns TemporalRelationalExpr:
	{TemporalRelationalExpr}
	'TemporalRelationalExpr'
	'{'
		('operator' operator=EString)?
		('left' left=TemporalExpression)?
		('right' right=TemporalExpression)?
	'}';

TemporalRemainderExpr returns TemporalRemainderExpr:
	{TemporalRemainderExpr}
	'TemporalRemainderExpr'
	'{'
		('operator' operator=EString)?
		('left' left=TemporalExpression)?
		('right' right=TemporalExpression)?
	'}';

TemporalAdditiveExpr returns TemporalAdditiveExpr:
	{TemporalAdditiveExpr}
	'TemporalAdditiveExpr'
	'{'
		('operator' '{' operator+=EString ( "," operator+=EString)* '}' )?
		('elements' '{' elements+=TemporalExpression ( "," elements+=TemporalExpression)* '}' )?
	'}';

TemporalMultiplicativeExpr returns TemporalMultiplicativeExpr:
	{TemporalMultiplicativeExpr}
	'TemporalMultiplicativeExpr'
	'{'
		('operator' '{' operator+=EString ( "," operator+=EString)* '}' )?
		('elements' '{' elements+=TemporalExpression ( "," elements+=TemporalExpression)* '}' )?
	'}';

TemporalBinaryExpr returns TemporalBinaryExpr:
	{TemporalBinaryExpr}
	'TemporalBinaryExpr'
	'{'
		('operator' '{' operator+=EString ( "," operator+=EString)* '}' )?
		('elements' '{' elements+=TemporalExpression ( "," elements+=TemporalExpression)* '}' )?
	'}';

TemporalUnaryExpr returns TemporalUnaryExpr:
	{TemporalUnaryExpr}
	'TemporalUnaryExpr'
	'{'
		('kinds' kinds=EString)?
		('tue' tue=TemporalExpression)?
	'}';

TemporalPrimaryExpr returns TemporalPrimaryExpr:
	{TemporalPrimaryExpr}
	'TemporalPrimaryExpr'
	'{'
		('operator' operator=EString)?
		('predPatt' predPatt=[PredicateOrPatternReferrable|EString])?
		('pointer' pointer=[Referrable|EString])?
		('regexpPointer' regexpPointer=[DefineRegExpDecl|EString])?
		('predPattParams' '{' predPattParams+=TemporalExpression ( "," predPattParams+=TemporalExpression)* '}' )?
		('tpe' tpe=TemporalExpression)?
		('index' '{' index+=TemporalExpression ( "," index+=TemporalExpression)* '}' )?
		('temporalExpression' temporalExpression=TemporalExpression)?
		('regexp' regexp=RegExp)?
	'}';

Constant returns Constant:
	{Constant}
	'Constant'
	'{'
		('booleanValue' booleanValue=EString)?
		('integerValue' integerValue=EInt)?
	'}';

QuantifierExpr returns QuantifierExpr:
	{QuantifierExpr}
	'QuantifierExpr'
	'{'
		('operator' operator=EString)?
		('domainVar' domainVar=DomainVarDecl)?
		('temporalExpr' temporalExpr=TemporalExpression)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

ValueInRange returns ValueInRange:
	{ValueInRange}
	(multi?='multi')?
	'ValueInRange'
	'{'
		('int' int=EInt)?
		('from' from=EInt)?
		('to' to=EInt)?
		('booleanValue' booleanValue=EString)?
		('const' const=[TypeConstant|EString])?
	'}';

TypeConstant returns TypeConstant:
	{TypeConstant}
	'TypeConstant'
	name=EString;

PredicateOrPatternReferrable_Impl returns PredicateOrPatternReferrable:
	{PredicateOrPatternReferrable}
	'PredicateOrPatternReferrable'
	;

Referrable_Impl returns Referrable:
	{Referrable}
	'Referrable'
	name=EString;

RegExp_Impl returns RegExp:
	{RegExp}
	(empty?='empty')?
	'RegExp'
	'{'
		('val' val=EString)?
		('assrt' assrt=BooleanTerm)?
		('left' left=RegExp)?
	'}';

DefineRegExpDecl returns DefineRegExpDecl:
	{DefineRegExpDecl}
	'DefineRegExpDecl'
	name=EString
	'{'
		('exp' exp=RegExp)?
	'}';

VarDecl returns VarDecl:
	{VarDecl}
	'VarDecl'
	name=EString
	'{'
		('type' type=VarType)?
	'}';

DefineDecl returns DefineDecl:
	{DefineDecl}
	'DefineDecl'
	name=EString
	'{'
		('simpleExpr' simpleExpr=TemporalExpression)?
		('dimensions' '{' dimensions+=SizeDefineDecl ( "," dimensions+=SizeDefineDecl)* '}' )?
		('innerArray' innerArray=DefineArray)?
	'}';

PatternParam returns PatternParam:
	{PatternParam}
	'PatternParam'
	name=EString;

TypedParam returns TypedParam:
	{TypedParam}
	'TypedParam'
	name=EString
	'{'
		('type' type=VarType)?
	'}';

DomainVarDecl returns DomainVarDecl:
	{DomainVarDecl}
	'DomainVarDecl'
	name=EString
	'{'
		('domainType' domainType=VarType)?
	'}';

VarType returns VarType:
	{VarType}
	'VarType'
	name=EString
	'{'
		('type' type=[TypeDef|EString])?
		('subr' subr=Subrange)?
		('const' '{' const+=TypeConstant ( "," const+=TypeConstant)* '}' )?
		('dimensions' '{' dimensions+=SizeDefineDecl ( "," dimensions+=SizeDefineDecl)* '}' )?
	'}';

Subrange returns Subrange:
	{Subrange}
	'Subrange'
	'{'
		('from' from=SizeDefineDecl)?
		('to' to=SizeDefineDecl)?
	'}';

SizeDefineDecl returns SizeDefineDecl:
	{SizeDefineDecl}
	'SizeDefineDecl'
	'{'
		('value' value=EInt)?
		('name' name=[DefineDecl|EString])?
		('arithExp' arithExp=TemporalExpression)?
	'}';

DefineArray returns DefineArray:
	{DefineArray}
	'DefineArray'
	'{'
		('simpleExprs' '{' simpleExprs+=TemporalExpression ( "," simpleExprs+=TemporalExpression)* '}' )?
		('innerArrays' '{' innerArrays+=DefineArray ( "," innerArrays+=DefineArray)* '}' )?
	'}';

BooleanTerm returns BooleanTerm:
	{BooleanTerm}
	'BooleanTerm'
	'{'
		('relExpr' relExpr=TemporalExpression)?
	'}';

BinaryRegExp returns BinaryRegExp:
	{BinaryRegExp}
	(empty?='empty')?
	'BinaryRegExp'
	'{'
		('val' val=EString)?
		('op' op=EString)?
		('assrt' assrt=BooleanTerm)?
		('left' left=RegExp)?
		('right' right=RegExp)?
	'}';

UnaryRegExp returns UnaryRegExp:
	{UnaryRegExp}
	(empty?='empty')?
	(kleened?='kleened')?
	(questionMark?='questionMark')?
	(plus?='plus')?
	(haveExactRepetition?='haveExactRepetition')?
	(haveAtLeast?='haveAtLeast')?
	(haveRange?='haveRange')?
	'UnaryRegExp'
	'{'
		('val' val=EString)?
		('exactRepetition' exactRepetition=EInt)?
		('atLeast' atLeast=EInt)?
		('from' from=EInt)?
		('to' to=EInt)?
		('fromDefine' fromDefine=[DefineDecl|EString])?
		('toDefine' toDefine=[DefineDecl|EString])?
		('assrt' assrt=BooleanTerm)?
		('left' left=RegExp)?
	'}';

CompRegExp returns CompRegExp:
	{CompRegExp}
	(empty?='empty')?
	'CompRegExp'
	'{'
		('val' val=EString)?
		('comp' comp=EString)?
		('assrt' assrt=BooleanTerm)?
		('left' left=RegExp)?
	'}';

enum VarOwner returns VarOwner:
				SYS = 'SYS' | ENV = 'ENV' | AUX = 'AUX';

enum OverflowMethod returns OverflowMethod:
				KEEP = 'KEEP' | FALSE = 'FALSE' | MODULO = 'MODULO';

PatternParamList returns PatternParamList:
	{PatternParamList}
	'PatternParamList'
	'{'
		('params' '{' params+=PatternParam ( "," params+=PatternParam)* '}' )?
	'}';

TypedParamList returns TypedParamList:
	{TypedParamList}
	'TypedParamList'
	'{'
		('params' '{' params+=TypedParam ( "," params+=TypedParam)* '}' )?
	'}';

Trigger returns Trigger:
	{Trigger}
	'Trigger'
	'{'
		('initPointer' initPointer=[DefineRegExpDecl|EString])?
		('effectPointer' effectPointer=[DefineRegExpDecl|EString])?
		('initRegExp' initRegExp=RegExp)?
		('effectRegExp' effectRegExp=RegExp)?
	'}';
