// automatically generated by Xtext
grammar org.xtext.example.myatl.MyATL with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/gmt/2005/ATL" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/gmt/2005/OCL" as OCL

Root returns Root:
	{Root}
	'Root'
	'{'
		('unit' unit=Unit)?
	'}';

Unit returns Unit:
	Library | Query | Module;



OclExpression returns OCL::OclExpression:
	VariableExp | SuperExp | StringExp | BooleanExp | RealExp | IntegerExp | BagExp | OrderedSetExp | SequenceExp | SetExp | TupleExp | MapExp | EnumLiteralExp | OclUndefinedExp | NavigationOrAttributeCallExp | OperationCallExp_Impl | OperatorCallExp | CollectionOperationCallExp | IterateExp | IteratorExp | LetExp | IfExp | CollectionType_Impl | OclType_Impl | StringType | BooleanType | IntegerType | RealType | BagType | OrderedSetType | SequenceType | SetType | OclAnyType | TupleType | OclModelElement | MapType;


ModuleElement returns ModuleElement:
	Helper | MatchedRule_Impl | LazyMatchedRule | CalledRule;


OclFeature returns OCL::OclFeature:
	Attribute | Operation;


OclType returns OCL::OclType:
	OclType_Impl | CollectionType_Impl | StringType | BooleanType | IntegerType | RealType | BagType | OrderedSetType | SequenceType | SetType | OclAnyType | TupleType | OclModelElement | MapType;


VariableDeclaration returns OCL::VariableDeclaration:
	VariableDeclaration_Impl | TuplePart | Iterator | Parameter;











MatchedRule returns MatchedRule:
	MatchedRule_Impl | LazyMatchedRule;

OutPatternElement returns OutPatternElement:
	SimpleOutPatternElement | ForEachOutPatternElement;

Statement returns Statement:
	ExpressionStat | BindingStat | IfStat | ForStat;

InPatternElement returns InPatternElement:
	SimpleInPatternElement;


EString returns ecore::EString:
	STRING | ID;

LibraryRef returns LibraryRef:
	{LibraryRef}
	'LibraryRef'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
	'}';

Library returns Library:
	{Library}
	'Library'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('libraries' '{' libraries+=LibraryRef ( "," libraries+=LibraryRef)* '}' )?
		('helpers' '{' helpers+=Helper ( "," helpers+=Helper)* '}' )?
	'}';

Query returns Query:
	'Query'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('libraries' '{' libraries+=LibraryRef ( "," libraries+=LibraryRef)* '}' )?
		'body' body=OclExpression
		('helpers' '{' helpers+=Helper ( "," helpers+=Helper)* '}' )?
	'}';

Module returns Module:
	isRefining?='isRefining'
	'Module'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('libraries' '{' libraries+=LibraryRef ( "," libraries+=LibraryRef)* '}' )?
		'inModels' '{' inModels+=OclModel ( "," inModels+=OclModel)* '}' 
		'outModels' '{' outModels+=OclModel ( "," outModels+=OclModel)* '}' 
		('elements' '{' elements+=ModuleElement ( "," elements+=ModuleElement)* '}' )?
	'}';

Helper returns Helper:
	'Helper'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'definition' definition=OclFeatureDefinition
	'}';

OclFeatureDefinition returns OCL::OclFeatureDefinition:
	'OclFeatureDefinition'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'feature' feature=OclFeature
		('context_' context_=OclContextDefinition)?
	'}';

OclContextDefinition returns OCL::OclContextDefinition:
	'OclContextDefinition'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'context_' context_=OclType
	'}';

Attribute returns OCL::Attribute:
	'Attribute'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'initExpression' initExpression=OclExpression
		'type' type=OclType
	'}';

Operation returns OCL::Operation:
	'Operation'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'returnType' returnType=OclType
		'body' body=OclExpression
	'}';

OclType_Impl returns OCL::OclType:
	{OCL::OclType}
	'OclType'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
	'}';

VariableExp returns OCL::VariableExp:
	'VariableExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'referredVariable' referredVariable=[OCL::VariableDeclaration|EString]
		('type' type=OclType)?
	'}';

SuperExp returns OCL::SuperExp:
	{OCL::SuperExp}
	'SuperExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
	'}';

StringExp returns OCL::StringExp:
	'StringExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'stringSymbol' stringSymbol=EString
		('type' type=OclType)?
	'}';

BooleanExp returns OCL::BooleanExp:
	'BooleanExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'booleanSymbol' booleanSymbol=EString
		('type' type=OclType)?
	'}';

RealExp returns OCL::RealExp:
	'RealExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'realSymbol' realSymbol=EDouble
		('type' type=OclType)?
	'}';


IntegerExp returns OCL::IntegerExp:
	'IntegerExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'integerSymbol' integerSymbol=EInt
		('type' type=OclType)?
	'}';

BagExp returns OCL::BagExp:
	{OCL::BagExp}
	'BagExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		('elements' '{' elements+=OclExpression ( "," elements+=OclExpression)* '}' )?
	'}';

OrderedSetExp returns OCL::OrderedSetExp:
	{OCL::OrderedSetExp}
	'OrderedSetExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		('elements' '{' elements+=OclExpression ( "," elements+=OclExpression)* '}' )?
	'}';

SequenceExp returns OCL::SequenceExp:
	{OCL::SequenceExp}
	'SequenceExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		('elements' '{' elements+=OclExpression ( "," elements+=OclExpression)* '}' )?
	'}';

SetExp returns OCL::SetExp:
	{OCL::SetExp}
	'SetExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		('elements' '{' elements+=OclExpression ( "," elements+=OclExpression)* '}' )?
	'}';

TupleExp returns OCL::TupleExp:
	{OCL::TupleExp}
	'TupleExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		('tuplePart' '{' tuplePart+=TuplePart ( "," tuplePart+=TuplePart)* '}' )?
	'}';

MapExp returns OCL::MapExp:
	{OCL::MapExp}
	'MapExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		('elements' '{' elements+=MapElement ( "," elements+=MapElement)* '}' )?
	'}';

EnumLiteralExp returns OCL::EnumLiteralExp:
	{OCL::EnumLiteralExp}
	'EnumLiteralExp'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
	'}';

OclUndefinedExp returns OCL::OclUndefinedExp:
	{OCL::OclUndefinedExp}
	'OclUndefinedExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
	'}';

NavigationOrAttributeCallExp returns OCL::NavigationOrAttributeCallExp:
	'NavigationOrAttributeCallExp'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		'source' source=OclExpression
	'}';

OperationCallExp_Impl returns OCL::OperationCallExp:
	'OperationCallExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'operationName' operationName=EString
		('type' type=OclType)?
		'source' source=OclExpression
		('arguments' '{' arguments+=OclExpression ( "," arguments+=OclExpression)* '}' )?
	'}';

OperatorCallExp returns OCL::OperatorCallExp:
	'OperatorCallExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'operationName' operationName=EString
		('type' type=OclType)?
		'source' source=OclExpression
		('arguments' '{' arguments+=OclExpression ( "," arguments+=OclExpression)* '}' )?
	'}';

CollectionOperationCallExp returns OCL::CollectionOperationCallExp:
	'CollectionOperationCallExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'operationName' operationName=EString
		('type' type=OclType)?
		'source' source=OclExpression
		('arguments' '{' arguments+=OclExpression ( "," arguments+=OclExpression)* '}' )?
	'}';

IterateExp returns OCL::IterateExp:
	'IterateExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		'source' source=OclExpression
		'body' body=OclExpression
		'iterators' '{' iterators+=Iterator ( "," iterators+=Iterator)* '}' 
		'result' result=VariableDeclaration
	'}';

IteratorExp returns OCL::IteratorExp:
	'IteratorExp'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		'source' source=OclExpression
		'body' body=OclExpression
		'iterators' '{' iterators+=Iterator ( "," iterators+=Iterator)* '}' 
	'}';

LetExp returns OCL::LetExp:
	'LetExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		'variable' variable=VariableDeclaration
		'in_' in_=OclExpression
	'}';

IfExp returns OCL::IfExp:
	'IfExp'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		'thenExpression' thenExpression=OclExpression
		'condition' condition=OclExpression
		'elseExpression' elseExpression=OclExpression
	'}';

CollectionType_Impl returns OCL::CollectionType:
	'CollectionType'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		'elementType' elementType=OclType
	'}';

StringType returns OCL::StringType:
	{OCL::StringType}
	'StringType'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
	'}';

BooleanType returns OCL::BooleanType:
	{OCL::BooleanType}
	'BooleanType'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
	'}';

IntegerType returns OCL::IntegerType:
	{OCL::IntegerType}
	'IntegerType'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
	'}';

RealType returns OCL::RealType:
	{OCL::RealType}
	'RealType'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
	'}';

BagType returns OCL::BagType:
	'BagType'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		'elementType' elementType=OclType
	'}';

OrderedSetType returns OCL::OrderedSetType:
	'OrderedSetType'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		'elementType' elementType=OclType
	'}';

SequenceType returns OCL::SequenceType:
	'SequenceType'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		'elementType' elementType=OclType
	'}';

SetType returns OCL::SetType:
	'SetType'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		'elementType' elementType=OclType
	'}';

OclAnyType returns OCL::OclAnyType:
	{OCL::OclAnyType}
	'OclAnyType'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
	'}';

TupleType returns OCL::TupleType:
	{OCL::TupleType}
	'TupleType'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		('attributes' '{' attributes+=TupleTypeAttribute ( "," attributes+=TupleTypeAttribute)* '}' )?
	'}';

OclModelElement returns OCL::OclModelElement:
	'OclModelElement'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'model' model=[OCL::OclModel|EString]
		('type' type=OclType)?
	'}';

MapType returns OCL::MapType:
	'MapType'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('type' type=OclType)?
		'valueType' valueType=OclType
		'keyType' keyType=OclType
	'}';

VariableDeclaration_Impl returns OCL::VariableDeclaration:
	'VariableDeclaration'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('id' id=EString)?
		'varName' varName=EString
		('variableExp' '(' variableExp+=[OCL::VariableExp|EString] ( "," variableExp+=[OCL::VariableExp|EString])* ')' )?
		('type' type=OclType)?
		('initExpression' initExpression=OclExpression)?
	'}';

TuplePart returns OCL::TuplePart:
	'TuplePart'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('id' id=EString)?
		'varName' varName=EString
		('variableExp' '(' variableExp+=[OCL::VariableExp|EString] ( "," variableExp+=[OCL::VariableExp|EString])* ')' )?
		('type' type=OclType)?
		('initExpression' initExpression=OclExpression)?
	'}';

Iterator returns OCL::Iterator:
	'Iterator'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('id' id=EString)?
		'varName' varName=EString
		('variableExp' '(' variableExp+=[OCL::VariableExp|EString] ( "," variableExp+=[OCL::VariableExp|EString])* ')' )?
		('type' type=OclType)?
		('initExpression' initExpression=OclExpression)?
	'}';

Parameter returns OCL::Parameter:
	'Parameter'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('id' id=EString)?
		'varName' varName=EString
		('variableExp' '(' variableExp+=[OCL::VariableExp|EString] ( "," variableExp+=[OCL::VariableExp|EString])* ')' )?
		('type' type=OclType)?
		('initExpression' initExpression=OclExpression)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

ELong returns ecore::ELong:
	'-'? INT;

EInt returns ecore::EInt:
	'-'? INT;

MapElement returns OCL::MapElement:
	'MapElement'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'key' key=OclExpression
		'value' value=OclExpression
	'}';

TupleTypeAttribute returns OCL::TupleTypeAttribute:
	'TupleTypeAttribute'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'type' type=OclType
	'}';

OclModel returns OCL::OclModel:
	'OclModel'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'metamodel' metamodel=[OCL::OclModel|EString]
		('elements' '(' elements+=[OCL::OclModelElement|EString] ( "," elements+=[OCL::OclModelElement|EString])* ')' )?
		('model' '(' model+=[OCL::OclModel|EString] ( "," model+=[OCL::OclModel|EString])* ')' )?
	'}';

MatchedRule_Impl returns MatchedRule:
	isAbstract?='isAbstract'
	isRefining?='isRefining'
	isNoDefault?='isNoDefault'
	'MatchedRule'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('children' '(' children+=[MatchedRule|EString] ( "," children+=[MatchedRule|EString])* ')' )?
		('superRule' superRule=[MatchedRule|EString])?
		('outPattern' outPattern=OutPattern)?
		('actionBlock' actionBlock=ActionBlock)?
		('variables' '{' variables+=RuleVariableDeclaration ( "," variables+=RuleVariableDeclaration)* '}' )?
		('inPattern' inPattern=InPattern)?
	'}';

LazyMatchedRule returns LazyMatchedRule:
	isAbstract?='isAbstract'
	isRefining?='isRefining'
	isNoDefault?='isNoDefault'
	isUnique?='isUnique'
	'LazyMatchedRule'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('children' '(' children+=[MatchedRule|EString] ( "," children+=[MatchedRule|EString])* ')' )?
		('superRule' superRule=[MatchedRule|EString])?
		('outPattern' outPattern=OutPattern)?
		('actionBlock' actionBlock=ActionBlock)?
		('variables' '{' variables+=RuleVariableDeclaration ( "," variables+=RuleVariableDeclaration)* '}' )?
		('inPattern' inPattern=InPattern)?
	'}';

CalledRule returns CalledRule:
	isEntrypoint?='isEntrypoint'
	isEndpoint?='isEndpoint'
	'CalledRule'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('outPattern' outPattern=OutPattern)?
		('actionBlock' actionBlock=ActionBlock)?
		('variables' '{' variables+=RuleVariableDeclaration ( "," variables+=RuleVariableDeclaration)* '}' )?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

OutPattern returns OutPattern:
	'OutPattern'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'elements' '{' elements+=OutPatternElement ( "," elements+=OutPatternElement)* '}' 
	'}';

ActionBlock returns ActionBlock:
	{ActionBlock}
	'ActionBlock'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
	'}';

RuleVariableDeclaration returns RuleVariableDeclaration:
	'RuleVariableDeclaration'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('id' id=EString)?
		'varName' varName=EString
		('variableExp' '(' variableExp+=[OCL::VariableExp|EString] ( "," variableExp+=[OCL::VariableExp|EString])* ')' )?
		('type' type=OclType)?
		('initExpression' initExpression=OclExpression)?
	'}';

Binding returns Binding:
	isAssignment?='isAssignment'
	'Binding'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'propertyName' propertyName=EString
		'value' value=OclExpression
	'}';

SimpleOutPatternElement returns SimpleOutPatternElement:
	'SimpleOutPatternElement'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('id' id=EString)?
		'varName' varName=EString
		('variableExp' '(' variableExp+=[OCL::VariableExp|EString] ( "," variableExp+=[OCL::VariableExp|EString])* ')' )?
		('sourceElement' sourceElement=[InPatternElement|EString])?
		('model' model=[OCL::OclModel|EString])?
		('type' type=OclType)?
		('initExpression' initExpression=OclExpression)?
		('bindings' '{' bindings+=Binding ( "," bindings+=Binding)* '}' )?
		('reverseBindings' '{' reverseBindings+=OclExpression ( "," reverseBindings+=OclExpression)* '}' )?
	'}';

ForEachOutPatternElement returns ForEachOutPatternElement:
	'ForEachOutPatternElement'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('id' id=EString)?
		'varName' varName=EString
		('variableExp' '(' variableExp+=[OCL::VariableExp|EString] ( "," variableExp+=[OCL::VariableExp|EString])* ')' )?
		('sourceElement' sourceElement=[InPatternElement|EString])?
		('model' model=[OCL::OclModel|EString])?
		('type' type=OclType)?
		('initExpression' initExpression=OclExpression)?
		('bindings' '{' bindings+=Binding ( "," bindings+=Binding)* '}' )?
		'collection' collection=OclExpression
		'iterator' iterator=Iterator
	'}';

SimpleInPatternElement returns SimpleInPatternElement:
	'SimpleInPatternElement'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('id' id=EString)?
		'varName' varName=EString
		('variableExp' '(' variableExp+=[OCL::VariableExp|EString] ( "," variableExp+=[OCL::VariableExp|EString])* ')' )?
		'mapsTo' mapsTo=[OutPatternElement|EString]
		('models' '(' models+=[OCL::OclModel|EString] ( "," models+=[OCL::OclModel|EString])* ')' )?
		('type' type=OclType)?
		('initExpression' initExpression=OclExpression)?
	'}';

ExpressionStat returns ExpressionStat:
	'ExpressionStat'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'expression' expression=OclExpression
	'}';

BindingStat returns BindingStat:
	isAssignment?='isAssignment'
	'BindingStat'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'propertyName' propertyName=EString
		'source' source=OclExpression
		'value' value=OclExpression
	'}';

IfStat returns IfStat:
	'IfStat'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'condition' condition=OclExpression
		('thenStatements' '{' thenStatements+=Statement ( "," thenStatements+=Statement)* '}' )?
		('elseStatements' '{' elseStatements+=Statement ( "," elseStatements+=Statement)* '}' )?
	'}';

ForStat returns ForStat:
	'ForStat'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'iterator' iterator=Iterator
		'collection' collection=OclExpression
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
	'}';

InPattern returns InPattern:
	'InPattern'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'elements' '{' elements+=InPatternElement ( "," elements+=InPatternElement)* '}' 
		('filter' filter=OclExpression)?
	'}';
