// automatically generated by Xtext
grammar org.omg.qvt11.myqvto.MyQvto with org.eclipse.xtext.common.Terminals

import "http://schema.omg.org/spec/QVT/1.1/emof" 
import "http://schema.omg.org/spec/QVT/1.1/primitivetypes" as PrimitiveTypes
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://schema.omg.org/spec/QVT/1.1/qvtoperational" as qvtoperational

TopLevelGO returns qvtoperational::TopLevelGO:
	{qvtoperational::TopLevelGO}
	'TopLevelGO'
	'{'
		('unit_element' '{' unit_element+=Module ( "," unit_element+=Module)* '}' )?
		('moduleimport' '{' moduleimport+=ModuleImport ( "," moduleimport+=ModuleImport)* '}' )?
	'}';

Module returns qvtoperational::Module:
	Module_Impl | Constructor | ContextualProperty | EntryOperation | Helper | Library | MappingOperation | ModelType | OperationalTransformation | TagGO | MetaModelGO | AccessDecl | TypeDef | ClassifierGO;




Type returns Type:
	Class | DataType_Impl | Enumeration | PrimitiveType;




ExpressionGO returns qvtoperational::ExpressionGO:
	ExpressionGO_Impl | ImperativeCallExp_Impl | MappingCallExp | MappingParameter | ModelParameter | ObjectExp | ResolveExp_Impl | ResolveInExp | VarParameter_Impl;



NamedElement returns NamedElement:
	Class | DataType_Impl | Enumeration | EnumerationLiteral | Operation | Package | Parameter | PrimitiveType | Property;


OperationBody returns qvtoperational::OperationBody:
	OperationBody_Impl | ConstructorBody | MappingBody;

VarParameter returns qvtoperational::VarParameter:
	VarParameter_Impl | MappingParameter | ModelParameter;

ImperativeOperation returns qvtoperational::ImperativeOperation:
	ImperativeOperation_Impl | Constructor | ContextualProperty | EntryOperation | Helper | MappingOperation | TagGO | AccessDecl | TypeDef | ClassifierGO;



Element returns Element:
	Class | Comment | DataType_Impl | Enumeration | EnumerationLiteral | Factory | Operation | Package | Parameter | PrimitiveType | Property | Tag;





















































Module_Impl returns qvtoperational::Module:
	{qvtoperational::Module}
	'Module'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('configProperty' '(' configProperty+=[Property|EString] ( "," configProperty+=[Property|EString])* ')' )?
		('entry' entry=[qvtoperational::EntryOperation|EString])?
		('usedModelType' '(' usedModelType+=[qvtoperational::ModelType|EString] ( "," usedModelType+=[qvtoperational::ModelType|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
	'}';

ModuleImport returns qvtoperational::ModuleImport:
	'ModuleImport'
	'{'
		('kind' kind=ImportKind)?
		('identifier' '{' identifier+=EString ( "," identifier+=EString)* '}' )?
		('binding' '(' binding+=[qvtoperational::ModelType|EString] ( "," binding+=[qvtoperational::ModelType|EString])* ')' )?
		'importedModule' importedModule=[qvtoperational::Module|EString]
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('unit' unit=UnitRefGO)?
	'}';

Comment returns Comment:
	{Comment}
	'Comment'
	'{'
		('body' body=String0)?
		('annotatedElement' '(' annotatedElement+=[NamedElement|EString] ( "," annotatedElement+=[NamedElement|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
	'}';

String0 returns PrimitiveTypes::String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;

Package returns Package:
	{Package}
	'Package'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
	'}';

Property returns Property:
	{Property}
	'Property'
	'{'
		('name' name=String0)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('default' default=String0)?
		('isComposite' isComposite=Boolean)?
		('isDerived' isDerived=Boolean)?
		('isID' isID=Boolean)?
		('isReadOnly' isReadOnly=Boolean)?
		('type' type=[Type|EString])?
		('opposite' opposite=[Property|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
	'}';

EntryOperation returns qvtoperational::EntryOperation:
	'EntryOperation'
	'{'
		('name' name=String0)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('isBlackbox' isBlackbox=Boolean)?
		('uri' uri=String0)?
		('type' type=[Type|EString])?
		('raisedException' '(' raisedException+=[Type|EString] ( "," raisedException+=[Type|EString])* ')' )?
		('overridden' overridden=[qvtoperational::ImperativeOperation|EString])?
		('configProperty' '(' configProperty+=[Property|EString] ( "," configProperty+=[Property|EString])* ')' )?
		('entry' entry=[qvtoperational::EntryOperation|EString])?
		('usedModelType' '(' usedModelType+=[qvtoperational::ModelType|EString] ( "," usedModelType+=[qvtoperational::ModelType|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('body' body=OperationBody)?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		'entry_header' entry_header=EntryHeader
		('expression_block' expression_block=ExpressionBlock)?
	'}';

Tag returns Tag:
	{Tag}
	'Tag'
	'{'
		('name' name=String0)?
		('value' value=String0)?
		('element' '(' element+=[Element|EString] ( "," element+=[Element|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
	'}';

ExpressionGO_Impl returns qvtoperational::ExpressionGO:
	{qvtoperational::ExpressionGO}
	'ExpressionGO'
	'{'
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
	'}';

ModelType returns qvtoperational::ModelType:
	'ModelType'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('conformanceKind' conformanceKind=String0)?
		('compliance_kind' compliance_kind=EString)?
		('configProperty' '(' configProperty+=[Property|EString] ( "," configProperty+=[Property|EString])* ')' )?
		('entry' entry=[qvtoperational::EntryOperation|EString])?
		('usedModelType' '(' usedModelType+=[qvtoperational::ModelType|EString] ( "," usedModelType+=[qvtoperational::ModelType|EString])* ')' )?
		'metamodel' '(' metamodel+=[Package|EString] ( "," metamodel+=[Package|EString])* ')' 
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		('additionalCondition' '{' additionalCondition+=ExpressionGO ( "," additionalCondition+=ExpressionGO)* '}' )?
		('packageref_list' '{' packageref_list+=PackageRefGO ( "," packageref_list+=PackageRefGO)* '}' )?
		('modeltype_where' modeltype_where=ExpressionBlock)?
	'}';

Constructor returns qvtoperational::Constructor:
	'Constructor'
	'{'
		('name' name=String0)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('isBlackbox' isBlackbox=Boolean)?
		('uri' uri=String0)?
		('type' type=[Type|EString])?
		('raisedException' '(' raisedException+=[Type|EString] ( "," raisedException+=[Type|EString])* ')' )?
		('overridden' overridden=[qvtoperational::ImperativeOperation|EString])?
		('configProperty' '(' configProperty+=[Property|EString] ( "," configProperty+=[Property|EString])* ')' )?
		('entry' entry=[qvtoperational::EntryOperation|EString])?
		('usedModelType' '(' usedModelType+=[qvtoperational::ModelType|EString] ( "," usedModelType+=[qvtoperational::ModelType|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('body' body=OperationBody)?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		'constructor_header' constructor_header=ConstructorHeader
		('expression_block' expression_block=ExpressionBlock)?
	'}';

ContextualProperty returns qvtoperational::ContextualProperty:
	'ContextualProperty'
	'{'
		('name' name=String0)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('isBlackbox' isBlackbox=Boolean)?
		('uri' uri=String0)?
		'property_key' '{' property_key+=PropertyKey ( "," property_key+=PropertyKey)* '}' 
		('type' type=[Type|EString])?
		('raisedException' '(' raisedException+=[Type|EString] ( "," raisedException+=[Type|EString])* ')' )?
		('overridden' overridden=[qvtoperational::ImperativeOperation|EString])?
		('configProperty' '(' configProperty+=[Property|EString] ( "," configProperty+=[Property|EString])* ')' )?
		('entry' entry=[qvtoperational::EntryOperation|EString])?
		('usedModelType' '(' usedModelType+=[qvtoperational::ModelType|EString] ( "," usedModelType+=[qvtoperational::ModelType|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('body' body=OperationBody)?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		('initExpression' initExpression=ExpressionGO)?
		'declarator' declarator=Declarator
	'}';

Helper returns qvtoperational::Helper:
	'Helper'
	'{'
		('name' name=String0)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('isBlackbox' isBlackbox=Boolean)?
		('uri' uri=String0)?
		('isQuery' isQuery=Boolean)?
		('type' type=[Type|EString])?
		('raisedException' '(' raisedException+=[Type|EString] ( "," raisedException+=[Type|EString])* ')' )?
		('overridden' overridden=[qvtoperational::ImperativeOperation|EString])?
		('configProperty' '(' configProperty+=[Property|EString] ( "," configProperty+=[Property|EString])* ')' )?
		('entry' entry=[qvtoperational::EntryOperation|EString])?
		('usedModelType' '(' usedModelType+=[qvtoperational::ModelType|EString] ( "," usedModelType+=[qvtoperational::ModelType|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('body' body=OperationBody)?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		'helper_header' helper_header=HelperHeader
		('expression' expression=ExpressionGO)?
		('expression_block' expression_block=ExpressionBlock)?
	'}';

Library returns qvtoperational::Library:
	'Library'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('configProperty' '(' configProperty+=[Property|EString] ( "," configProperty+=[Property|EString])* ')' )?
		('entry' entry=[qvtoperational::EntryOperation|EString])?
		('usedModelType' '(' usedModelType+=[qvtoperational::ModelType|EString] ( "," usedModelType+=[qvtoperational::ModelType|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		'library_h' library_h=LibraryHeader
		('module_element' '{' module_element+=ImperativeOperation ( "," module_element+=ImperativeOperation)* '}' )?
	'}';

MappingOperation returns qvtoperational::MappingOperation:
	'MappingOperation'
	'{'
		('name' name=String0)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('isBlackbox' isBlackbox=Boolean)?
		('uri' uri=String0)?
		('type' type=[Type|EString])?
		('raisedException' '(' raisedException+=[Type|EString] ( "," raisedException+=[Type|EString])* ')' )?
		('overridden' overridden=[qvtoperational::ImperativeOperation|EString])?
		('configProperty' '(' configProperty+=[Property|EString] ( "," configProperty+=[Property|EString])* ')' )?
		('entry' entry=[qvtoperational::EntryOperation|EString])?
		('usedModelType' '(' usedModelType+=[qvtoperational::ModelType|EString] ( "," usedModelType+=[qvtoperational::ModelType|EString])* ')' )?
		('disjunct' '(' disjunct+=[qvtoperational::MappingOperation|EString] ( "," disjunct+=[qvtoperational::MappingOperation|EString])* ')' )?
		('inherited' '(' inherited+=[qvtoperational::MappingOperation|EString] ( "," inherited+=[qvtoperational::MappingOperation|EString])* ')' )?
		('merged' '(' merged+=[qvtoperational::MappingOperation|EString] ( "," merged+=[qvtoperational::MappingOperation|EString])* ')' )?
		('refinedRelation' refinedRelation=[qvtoperational::ExpressionGO|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('body' body=OperationBody)?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		('when' when=ExpressionGO)?
		('where' where=ExpressionGO)?
		'mapping_full_header' mapping_full_header=MappingFullHeader
		('mapping_body' mapping_body=MappingBody)?
	'}';

OperationalTransformation returns qvtoperational::OperationalTransformation:
	'OperationalTransformation'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('configProperty' '(' configProperty+=[Property|EString] ( "," configProperty+=[Property|EString])* ')' )?
		('entry' entry=[qvtoperational::EntryOperation|EString])?
		('usedModelType' '(' usedModelType+=[qvtoperational::ModelType|EString] ( "," usedModelType+=[qvtoperational::ModelType|EString])* ')' )?
		('intermediateClass' '(' intermediateClass+=[Class|EString] ( "," intermediateClass+=[Class|EString])* ')' )?
		('intermediateProperty' '(' intermediateProperty+=[Property|EString] ( "," intermediateProperty+=[Property|EString])* ')' )?
		('refined' refined=[qvtoperational::ExpressionGO|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		('modelParameter' '{' modelParameter+=ModelParameter ( "," modelParameter+=ModelParameter)* '}' )?
		('relation' '{' relation+=ExpressionGO ( "," relation+=ExpressionGO)* '}' )?
		'transformation_h' transformation_h=TransformationHeader
		('module_element' '{' module_element+=ImperativeOperation ( "," module_element+=ImperativeOperation)* '}' )?
	'}';

TagGO returns qvtoperational::TagGO:
	'TagGO'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('isBlackbox' isBlackbox=Boolean)?
		'tagid' tagid=EString
		('configProperty' '(' configProperty+=[Property|EString] ( "," configProperty+=[Property|EString])* ')' )?
		('entry' entry=[qvtoperational::EntryOperation|EString])?
		('usedModelType' '(' usedModelType+=[qvtoperational::ModelType|EString] ( "," usedModelType+=[qvtoperational::ModelType|EString])* ')' )?
		('type' type=[Type|EString])?
		('raisedException' '(' raisedException+=[Type|EString] ( "," raisedException+=[Type|EString])* ')' )?
		('overridden' overridden=[qvtoperational::ImperativeOperation|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('body' body=OperationBody)?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		'scoped_identifier' scoped_identifier=ScopedIdentifier
		('tagvalue' tagvalue=ExpressionGO)?
	'}';

MetaModelGO returns qvtoperational::MetaModelGO:
	'MetaModelGO'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('configProperty' '(' configProperty+=[Property|EString] ( "," configProperty+=[Property|EString])* ')' )?
		('entry' entry=[qvtoperational::EntryOperation|EString])?
		('usedModelType' '(' usedModelType+=[qvtoperational::ModelType|EString] ( "," usedModelType+=[qvtoperational::ModelType|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		'metamodel_h' metamodel_h=MetaModelHeader
		('metamodel_element' '{' metamodel_element+=MetaModelElement ( "," metamodel_element+=MetaModelElement)* '}' )?
	'}';

AccessDecl returns qvtoperational::AccessDecl:
	'AccessDecl'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('isBlackbox' isBlackbox=Boolean)?
		('configProperty' '(' configProperty+=[Property|EString] ( "," configProperty+=[Property|EString])* ')' )?
		('entry' entry=[qvtoperational::EntryOperation|EString])?
		('usedModelType' '(' usedModelType+=[qvtoperational::ModelType|EString] ( "," usedModelType+=[qvtoperational::ModelType|EString])* ')' )?
		('type' type=[Type|EString])?
		('raisedException' '(' raisedException+=[Type|EString] ( "," raisedException+=[Type|EString])* ')' )?
		('overridden' overridden=[qvtoperational::ImperativeOperation|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('body' body=OperationBody)?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		'access_usage' access_usage=AccessUsage
	'}';

TypeDef returns qvtoperational::TypeDef:
	'TypeDef'
	'{'
		('name' name=String0)?
		('uri' uri=String0)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('isBlackbox' isBlackbox=Boolean)?
		('configProperty' '(' configProperty+=[Property|EString] ( "," configProperty+=[Property|EString])* ')' )?
		('entry' entry=[qvtoperational::EntryOperation|EString])?
		('usedModelType' '(' usedModelType+=[qvtoperational::ModelType|EString] ( "," usedModelType+=[qvtoperational::ModelType|EString])* ')' )?
		('type' type=[Type|EString])?
		('raisedException' '(' raisedException+=[Type|EString] ( "," raisedException+=[Type|EString])* ')' )?
		('overridden' overridden=[qvtoperational::ImperativeOperation|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('body' body=OperationBody)?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		'typespec' typespec=TypeSpec
		('typedef_condition' typedef_condition=ExpressionGO)?
	'}';

ClassifierGO returns qvtoperational::ClassifierGO:
	'ClassifierGO'
	'{'
		('name' name=String0)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('isBlackbox' isBlackbox=Boolean)?
		('uri' uri=String0)?
		('type' type=[Type|EString])?
		('raisedException' '(' raisedException+=[Type|EString] ( "," raisedException+=[Type|EString])* ')' )?
		('overridden' overridden=[qvtoperational::ImperativeOperation|EString])?
		('configProperty' '(' configProperty+=[Property|EString] ( "," configProperty+=[Property|EString])* ')' )?
		('entry' entry=[qvtoperational::EntryOperation|EString])?
		('usedModelType' '(' usedModelType+=[qvtoperational::ModelType|EString] ( "," usedModelType+=[qvtoperational::ModelType|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('body' body=OperationBody)?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
		('nestedPackage' '{' nestedPackage+=Package ( "," nestedPackage+=Package)* '}' )?
		('ownedType' '{' ownedType+=Type ( "," ownedType+=Type)* '}' )?
		('moduleImport' '{' moduleImport+=ModuleImport ( "," moduleImport+=ModuleImport)* '}' )?
		('ownedTag' '{' ownedTag+=Tag ( "," ownedTag+=Tag)* '}' )?
		('ownedVariable' '{' ownedVariable+=ExpressionGO ( "," ownedVariable+=ExpressionGO)* '}' )?
		'classifier_h' classifier_h=ClassifierHeader
		('classifier_feature_list' classifier_feature_list=ClassifierFeatureList)?
	'}';

Class returns Class:
	{Class}
	'Class'
	'{'
		('name' name=String0)?
		('isAbstract' isAbstract=Boolean)?
		('superClass' '(' superClass+=[Class|EString] ( "," superClass+=[Class|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedAttribute' '{' ownedAttribute+=Property ( "," ownedAttribute+=Property)* '}' )?
		('ownedOperation' '{' ownedOperation+=Operation ( "," ownedOperation+=Operation)* '}' )?
	'}';

DataType_Impl returns DataType:
	{DataType}
	'DataType'
	'{'
		('name' name=String0)?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
	'}';

Enumeration returns Enumeration:
	{Enumeration}
	'Enumeration'
	'{'
		('name' name=String0)?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedLiteral' '{' ownedLiteral+=EnumerationLiteral ( "," ownedLiteral+=EnumerationLiteral)* '}' )?
	'}';

EnumerationLiteral returns EnumerationLiteral:
	{EnumerationLiteral}
	'EnumerationLiteral'
	'{'
		('name' name=String0)?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
	'}';

Operation returns Operation:
	{Operation}
	'Operation'
	'{'
		('name' name=String0)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('type' type=[Type|EString])?
		('raisedException' '(' raisedException+=[Type|EString] ( "," raisedException+=[Type|EString])* ')' )?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
	'}';

Parameter returns Parameter:
	{Parameter}
	'Parameter'
	'{'
		('name' name=String0)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('type' type=[Type|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
	'}';

PrimitiveType returns PrimitiveType:
	{PrimitiveType}
	'PrimitiveType'
	'{'
		('name' name=String0)?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
	'}';

Boolean returns PrimitiveTypes::Boolean:
	'Boolean' /* TODO: implement this rule and an appropriate IValueConverter */;

Integer returns PrimitiveTypes::Integer:
	'Integer' /* TODO: implement this rule and an appropriate IValueConverter */;

UnlimitedNatural returns PrimitiveTypes::UnlimitedNatural:
	'UnlimitedNatural' /* TODO: implement this rule and an appropriate IValueConverter */;

OperationBody_Impl returns qvtoperational::OperationBody:
	{qvtoperational::OperationBody}
	'OperationBody'
	'{'
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('content' '{' content+=ExpressionGO ( "," content+=ExpressionGO)* '}' )?
		('variable' '{' variable+=ExpressionGO ( "," variable+=ExpressionGO)* '}' )?
	'}';

VarParameter_Impl returns qvtoperational::VarParameter:
	'VarParameter'
	'{'
		('name' name=String0)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
		('kind' kind=DirectionKind)?
		('type' type=[Type|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		'declarator' declarator=Declarator
	'}';

ImperativeOperation_Impl returns qvtoperational::ImperativeOperation:
	{qvtoperational::ImperativeOperation}
	'ImperativeOperation'
	'{'
		('name' name=String0)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('isBlackbox' isBlackbox=Boolean)?
		('type' type=[Type|EString])?
		('raisedException' '(' raisedException+=[Type|EString] ( "," raisedException+=[Type|EString])* ')' )?
		('overridden' overridden=[qvtoperational::ImperativeOperation|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('ownedParameter' '{' ownedParameter+=Parameter ( "," ownedParameter+=Parameter)* '}' )?
		('body' body=OperationBody)?
		('context' context=VarParameter)?
		('result' '{' result+=VarParameter ( "," result+=VarParameter)* '}' )?
	'}';

EntryHeader returns qvtoperational::EntryHeader:
	'EntryHeader'
	'{'
		'simple_signature' simple_signature=SimpleSignature
	'}';

ExpressionBlock returns qvtoperational::ExpressionBlock:
	{qvtoperational::ExpressionBlock}
	'ExpressionBlock'
	'{'
		('expression_list' expression_list=ExpressionList)?
	'}';

ConstructorBody returns qvtoperational::ConstructorBody:
	{qvtoperational::ConstructorBody}
	'ConstructorBody'
	'{'
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('content' '{' content+=ExpressionGO ( "," content+=ExpressionGO)* '}' )?
		('variable' '{' variable+=ExpressionGO ( "," variable+=ExpressionGO)* '}' )?
	'}';

MappingBody returns qvtoperational::MappingBody:
	{qvtoperational::MappingBody}
	'MappingBody'
	'{'
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		('content' '{' content+=ExpressionGO ( "," content+=ExpressionGO)* '}' )?
		('variable' '{' variable+=ExpressionGO ( "," variable+=ExpressionGO)* '}' )?
		('endSection' '{' endSection+=ExpressionGO ( "," endSection+=ExpressionGO)* '}' )?
		('initSection' '{' initSection+=ExpressionGO ( "," initSection+=ExpressionGO)* '}' )?
		('population_section' population_section=PopulationSection)?
	'}';

PopulationSection returns qvtoperational::PopulationSection:
	{qvtoperational::PopulationSection}
	'PopulationSection'
	'{'
		('expression_list' expression_list=ExpressionList)?
		('expression_block' expression_block=ExpressionBlock)?
	'}';

ExpressionList returns qvtoperational::ExpressionList:
	'ExpressionList'
	'{'
		'expression_semi_list' expression_semi_list=ExpressionSemiList
	'}';

ExpressionSemiList returns qvtoperational::ExpressionSemiList:
	{qvtoperational::ExpressionSemiList}
	'ExpressionSemiList'
	'{'
		('expression' '{' expression+=ExpressionGO ( "," expression+=ExpressionGO)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

enum DirectionKind returns qvtoperational::DirectionKind:
				in = 'in' | inout = 'inout' | out = 'out';

Declarator returns qvtoperational::Declarator:
	'Declarator'
	'{'
		'typespec' typespec=TypeSpec
		('init_part' init_part=InitPart)?
		('scoped_identifier' scoped_identifier=ScopedIdentifier)?
	'}';

MappingParameter returns qvtoperational::MappingParameter:
	'MappingParameter'
	'{'
		('name' name=String0)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
		('kind' kind=DirectionKind)?
		('type' type=[Type|EString])?
		('extent' extent=[qvtoperational::ModelParameter|EString])?
		('referredDomain' referredDomain=[qvtoperational::ExpressionGO|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		'declarator' declarator=Declarator
	'}';

ModelParameter returns qvtoperational::ModelParameter:
	'ModelParameter'
	'{'
		('name' name=String0)?
		('isOrdered' isOrdered=Boolean)?
		('isUnique' isUnique=Boolean)?
		('lower' lower=Integer)?
		('upper' upper=UnlimitedNatural)?
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
		('kind' kind=DirectionKind)?
		('type' type=[Type|EString])?
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
		'declarator' declarator=Declarator
	'}';

TypeSpec returns qvtoperational::TypeSpec:
	'TypeSpec'
	'{'
		('extent_location' extent_location=EString)?
		'type_reference' type_reference=TypeReference
	'}';

InitPart returns qvtoperational::InitPart:
	'InitPart'
	'{'
		'init_op' init_op=EString
		'expression' expression=ExpressionGO
	'}';

ScopedIdentifier returns qvtoperational::ScopedIdentifier:
	{qvtoperational::ScopedIdentifier}
	'ScopedIdentifier'
	'{'
		('identifier' '{' identifier+=EString ( "," identifier+=EString)* '}' )?
	'}';

TypeReference returns qvtoperational::TypeReference:
	{qvtoperational::TypeReference}
	'TypeReference'
	'{'
		('scoped_identifier' scoped_identifier=ScopedIdentifier)?
		('complex_type' complex_type=ComplexType)?
	'}';

ComplexType returns qvtoperational::ComplexType:
	{qvtoperational::ComplexType}
	'ComplexType'
	'{'
		('complex_type_key' complex_type_key=ComplexTypeKey)?
		('collection_key' collection_key=CollectionKey)?
		('typespec' '{' typespec+=TypeSpec ( "," typespec+=TypeSpec)* '}' )?
		('declarator_list' declarator_list=DeclaratorList)?
	'}';

enum ComplexTypeKey returns qvtoperational::ComplexTypeKey:
				Collection = 'Collection' | Set = 'Set' | OrderedSet = 'OrderedSet' | Sequence = 'Sequence' | Bag = 'Bag' | List = 'List' | Dict = 'Dict' | Tuple = 'Tuple';

enum CollectionKey returns qvtoperational::CollectionKey:
				Collection = 'Collection' | Set = 'Set' | OrderedSet = 'OrderedSet' | Sequence = 'Sequence' | Bag = 'Bag' | List = 'List';

DeclaratorList returns qvtoperational::DeclaratorList:
	{qvtoperational::DeclaratorList}
	'DeclaratorList'
	'{'
		('declarator' '{' declarator+=Declarator ( "," declarator+=Declarator)* '}' )?
	'}';

SimpleSignature returns qvtoperational::SimpleSignature:
	{qvtoperational::SimpleSignature}
	'SimpleSignature'
	'{'
		('param_list' param_list=ParamList)?
	'}';

ParamList returns qvtoperational::ParamList:
	{qvtoperational::ParamList}
	'ParamList'
	'{'
		('param' '{' param+=VarParameter ( "," param+=VarParameter)* '}' )?
	'}';

Factory returns Factory:
	'Factory'
	'{'
		'package' package=[Package|EString]
		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
	'}';

ImperativeCallExp_Impl returns qvtoperational::ImperativeCallExp:
	{qvtoperational::ImperativeCallExp}
	'ImperativeCallExp'
	'{'
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
		('isVirtual' isVirtual=Boolean)?
	'}';

MappingCallExp returns qvtoperational::MappingCallExp:
	{qvtoperational::MappingCallExp}
	'MappingCallExp'
	'{'
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
		('isVirtual' isVirtual=Boolean)?
		('isStrict' isStrict=Boolean)?
	'}';

ObjectExp returns qvtoperational::ObjectExp:
	'ObjectExp'
	'{'
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
		'referredObject' referredObject=[qvtoperational::ExpressionGO|EString]
		'body' body=ConstructorBody
	'}';

ResolveExp_Impl returns qvtoperational::ResolveExp:
	{qvtoperational::ResolveExp}
	'ResolveExp'
	'{'
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
		('isDeferred' isDeferred=Boolean)?
		('isInverse' isInverse=Boolean)?
		('one' one=Boolean)?
		('condition' condition=ExpressionGO)?
		('target' target=ExpressionGO)?
	'}';

ResolveInExp returns qvtoperational::ResolveInExp:
	{qvtoperational::ResolveInExp}
	'ResolveInExp'
	'{'
		('dummyContent' '{' dummyContent+=EString ( "," dummyContent+=EString)* '}' )?
		('isDeferred' isDeferred=Boolean)?
		('isInverse' isInverse=Boolean)?
		('one' one=Boolean)?
		('inMapping' inMapping=[qvtoperational::MappingOperation|EString])?
		('condition' condition=ExpressionGO)?
		('target' target=ExpressionGO)?
	'}';

PackageRefGO returns qvtoperational::PackageRefGO:
	{qvtoperational::PackageRefGO}
	'PackageRefGO'
	'{'
		('uri' uri=EString)?
		('scoped_identifier' scoped_identifier=ScopedIdentifier)?
	'}';

ConstructorHeader returns qvtoperational::ConstructorHeader:
	'ConstructorHeader'
	'{'
		('qualifier' '{' qualifier+=GeneralQualifier ( "," qualifier+=GeneralQualifier)* '}' )?
		'scoped_identifier' scoped_identifier=ScopedIdentifier
		'simple_signature' simple_signature=SimpleSignature
	'}';

enum GeneralQualifier returns qvtoperational::GeneralQualifier:
				blackbox = 'blackbox' | abstract = 'abstract' | static = 'static';

enum PropertyKey returns qvtoperational::PropertyKey:
				derived = 'derived' | literal = 'literal' | configuration = 'configuration' | property = 'property';

HelperHeader returns qvtoperational::HelperHeader:
	'HelperHeader'
	'{'
		'helper_info' helper_info=HelperInfo
		'scope_identifier' scope_identifier=ScopedIdentifier
		'complete_signature' complete_signature=CompleteSignature
	'}';

HelperInfo returns qvtoperational::HelperInfo:
	{qvtoperational::HelperInfo}
	'HelperInfo'
	'{'
		('qualifier' '{' qualifier+=GeneralQualifier ( "," qualifier+=GeneralQualifier)* '}' )?
		('helper_kind' helper_kind=HelperKind)?
	'}';

CompleteSignature returns qvtoperational::CompleteSignature:
	'CompleteSignature'
	'{'
		'simple_signature' simple_signature=SimpleSignature
		('param_list' param_list=ParamList)?
	'}';

enum HelperKind returns qvtoperational::HelperKind:
				helper = 'helper' | query = 'query';

LibraryHeader returns qvtoperational::LibraryHeader:
	{qvtoperational::LibraryHeader}
	'LibraryHeader'
	name=EString
	'{'
		('library_signature' library_signature=SimpleSignature)?
		('module_usage' module_usage=ModuleUsageGO)?
	'}';

ModuleUsageGO returns qvtoperational::ModuleUsageGO:
	{qvtoperational::ModuleUsageGO}
	'ModuleUsageGO'
	'{'
		('access_usage' access_usage=AccessUsage)?
		('extends_usage' extends_usage=ExtendsUsage)?
	'}';

AccessUsage returns qvtoperational::AccessUsage:
	{qvtoperational::AccessUsage}
	'AccessUsage'
	'{'
		('module_kind' module_kind=ModuleKind)?
		('moduleref_list' '{' moduleref_list+=ModuleRefGO ( "," moduleref_list+=ModuleRefGO)* '}' )?
	'}';

ExtendsUsage returns qvtoperational::ExtendsUsage:
	{qvtoperational::ExtendsUsage}
	'ExtendsUsage'
	'{'
		('module_kind' module_kind=ModuleKind)?
		('moduleref_list' '{' moduleref_list+=ModuleRefGO ( "," moduleref_list+=ModuleRefGO)* '}' )?
	'}';

enum ModuleKind returns qvtoperational::ModuleKind:
				transformation = 'transformation' | library = 'library';

ModuleRefGO returns qvtoperational::ModuleRefGO:
	'ModuleRefGO'
	'{'
		'scoped_identifier' scoped_identifier=ScopedIdentifier
		('simple_signature' simple_signature=SimpleSignature)?
	'}';

MappingFullHeader returns qvtoperational::MappingFullHeader:
	'MappingFullHeader'
	'{'
		'mapping_header' mapping_header=MappingHeader
		('when' when=ExpressionBlock)?
		('where' where=ExpressionBlock)?
	'}';

MappingHeader returns qvtoperational::MappingHeader:
	'MappingHeader'
	'{'
		('qualifier' '{' qualifier+=GeneralQualifier ( "," qualifier+=GeneralQualifier)* '}' )?
		('param_direction' param_direction=DirectionKind)?
		'scoped_identifier' scoped_identifier=ScopedIdentifier
		'complete_signature' complete_signature=CompleteSignature
		('mapping_extra' '{' mapping_extra+=MappingExtra ( "," mapping_extra+=MappingExtra)* '}' )?
	'}';

MappingExtra returns qvtoperational::MappingExtra:
	{qvtoperational::MappingExtra}
	'MappingExtra'
	'{'
		('mapping_extension' mapping_extension=MappingExtension)?
		('mapping_refinement' mapping_refinement=MappingRefinement)?
	'}';

MappingExtension returns qvtoperational::MappingExtension:
	'MappingExtension'
	'{'
		'mapping_extension_key' mapping_extension_key=MappingExtensionKey
		'scoped_identifier_list' scoped_identifier_list=ScopedIdentifierList
	'}';

MappingRefinement returns qvtoperational::MappingRefinement:
	'MappingRefinement'
	'{'
		'scoped_identifier' scoped_identifier=ScopedIdentifier
	'}';

enum MappingExtensionKey returns qvtoperational::MappingExtensionKey:
				inherits = 'inherits' | merges = 'merges' | disjuncts = 'disjuncts';

ScopedIdentifierList returns qvtoperational::ScopedIdentifierList:
	{qvtoperational::ScopedIdentifierList}
	'ScopedIdentifierList'
	'{'
		('scoped_identifier_list' '{' scoped_identifier_list+=ScopedIdentifier ( "," scoped_identifier_list+=ScopedIdentifier)* '}' )?
	'}';

TransformationHeader returns qvtoperational::TransformationHeader:
	'TransformationHeader'
	name=EString
	'{'
		('qualifier' '{' qualifier+=GeneralQualifier ( "," qualifier+=GeneralQualifier)* '}' )?
		'transformation_signature' transformation_signature=SimpleSignature
		('transformation_usage_refine' transformation_usage_refine=TransformationUsageRefine)?
	'}';

TransformationUsageRefine returns qvtoperational::TransformationUsageRefine:
	{qvtoperational::TransformationUsageRefine}
	'TransformationUsageRefine'
	'{'
		('module_usage' module_usage=ModuleUsageGO)?
		('transformation_refine' transformation_refine=ModuleRefGO)?
	'}';

MetaModelHeader returns qvtoperational::MetaModelHeader:
	'MetaModelHeader'
	'{'
		'scoped_identifier' scoped_identifier=ScopedIdentifier
	'}';

MetaModelElement returns qvtoperational::MetaModelElement:
	{qvtoperational::MetaModelElement}
	'MetaModelElement'
	'{'
		('classifier' classifier=ClassifierGO)?
		('enumeration' enumeration=EnumerationGO)?
		('tag' tag=TagGO)?
	'}';

EnumerationGO returns qvtoperational::EnumerationGO:
	{qvtoperational::EnumerationGO}
	'EnumerationGO'
	'{'
		('identifier' '{' identifier+=EString ( "," identifier+=EString)* '}' )?
		('enumeration_h' enumeration_h=EnumerationHeader)?
	'}';

EnumerationHeader returns qvtoperational::EnumerationHeader:
	'EnumerationHeader'
	'{'
		'identifier' identifier=EString
	'}';

ClassifierHeader returns qvtoperational::ClassifierHeader:
	'ClassifierHeader'
	'{'
		'classifier_info' classifier_info=ClassifierInfo
		'scoped_identifier' scoped_identifier=ScopedIdentifier
		('classifier_extension' classifier_extension=ClassifierExtension)?
	'}';

ClassifierFeatureList returns qvtoperational::ClassifierFeatureList:
	{qvtoperational::ClassifierFeatureList}
	'ClassifierFeatureList'
	'{'
		('classifier_feature' '{' classifier_feature+=ClassifierFeature ( "," classifier_feature+=ClassifierFeature)* '}' )?
	'}';

ClassifierInfo returns qvtoperational::ClassifierInfo:
	{qvtoperational::ClassifierInfo}
	'ClassifierInfo'
	'{'
		('qualifier' '{' qualifier+=GeneralQualifier ( "," qualifier+=GeneralQualifier)* '}' )?
	'}';

ClassifierExtension returns qvtoperational::ClassifierExtension:
	'ClassifierExtension'
	'{'
		'scoped_identifier_list' scoped_identifier_list=ScopedIdentifierList
	'}';

ClassifierFeature returns qvtoperational::ClassifierFeature:
	'ClassifierFeature'
	'{'
		('feature_qualifier' feature_qualifier=FeatureQualifier)?
		'declarator' declarator=Declarator
		('multiplicity' multiplicity=Multiplicity)?
		('opposite_property' opposite_property=OppositeProperty)?
		('complete_signature' complete_signature=CompleteSignature)?
		('tag' tag=TagGO)?
	'}';

FeatureQualifier returns qvtoperational::FeatureQualifier:
	{qvtoperational::FeatureQualifier}
	'FeatureQualifier'
	'{'
		('feature_key' '{' feature_key+=FeatureKey ( "," feature_key+=FeatureKey)* '}' )?
		('stereotype_qualifier' stereotype_qualifier=StereotypeQualifier)?
	'}';

Multiplicity returns qvtoperational::Multiplicity:
	'Multiplicity'
	'{'
		'multiplicity_range' multiplicity_range=EString
	'}';

OppositeProperty returns qvtoperational::OppositeProperty:
	{qvtoperational::OppositeProperty}
	'OppositeProperty'
	name=EString
	'{'
		('multiplicity' multiplicity=Multiplicity)?
	'}';

StereotypeQualifier returns qvtoperational::StereotypeQualifier:
	{qvtoperational::StereotypeQualifier}
	'StereotypeQualifier'
	'{'
		('identifier' '{' identifier+=EString ( "," identifier+=EString)* '}' )?
	'}';

enum FeatureKey returns qvtoperational::FeatureKey:
				composes = 'composes' | references = 'references' | readonly = 'readonly' | derived = 'derived' | static = 'static';

enum ImportKind returns qvtoperational::ImportKind:
				extension = 'extension' | access = 'access';

UnitRefGO returns qvtoperational::UnitRefGO:
	{qvtoperational::UnitRefGO}
	'UnitRefGO'
	'{'
		('identifier' '{' identifier+=EString ( "," identifier+=EString)* '}' )?
	'}';
