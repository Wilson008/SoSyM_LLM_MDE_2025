// automatically generated by Xtext
grammar org.prettyprinter.sml.SML with org.eclipse.xtext.common.Terminals

//import "http://www.scenariotools.org/sml" 
import "platform:/resource/org.scenariotools.sml.model/model/sml.ecore"
//import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore" as ecore // see https://www.eclipse.org/forums/index.php/t/1084593/ and https://bugs.eclipse.org/bugs/show_bug.cgi?id=316610

Specification returns Specification:
	{Specification}
	'Specification'
	name=EString
	'{'
		('domains' '(' domains+=[ecore::EPackage|EString] ( "," domains+=[ecore::EPackage|EString])* ')' )?
		('contexts' '(' contexts+=[ecore::EPackage|EString] ( "," contexts+=[ecore::EPackage|EString])* ')' )?
		('controllableEClasses' '(' controllableEClasses+=[ecore::EClass|EString] ( "," controllableEClasses+=[ecore::EClass|EString])* ')' )?
		('nonSpontaneousOperations' '(' nonSpontaneousOperations+=[ecore::ETypedElement|EString] ( "," nonSpontaneousOperations+=[ecore::ETypedElement|EString])* ')' )?
		('includedCollaborations' '(' includedCollaborations+=[Collaboration|EString] ( "," includedCollaborations+=[Collaboration|EString])* ')' )?
		('imports' '{' imports+=DummyExprClass ( "," imports+=DummyExprClass)* '}' )?
		('containedCollaborations' '{' containedCollaborations+=Collaboration ( "," containedCollaborations+=Collaboration)* '}' )?
		('eventParameterRanges' '{' eventParameterRanges+=EventParameterRanges ( "," eventParameterRanges+=EventParameterRanges)* '}' )?
		('channelOptions' channelOptions=ChannelOptions)?
	'}';

DummyExprClass returns DummyExprClass:
	DummyExprClass_Impl | Interaction;



ETypedElement returns ecore::ETypedElement:
	EAttribute | EOperation | EParameter | EReference;





EClassifier returns ecore::EClassifier:
	EClass | EDataType_Impl | EEnum;



EStructuralFeature returns ecore::EStructuralFeature:
	EAttribute | EReference;






InteractionFragment returns InteractionFragment:
	Interaction | ModalMessage | Alternative | Loop | Parallel | WaitCondition | InterruptCondition | ViolationCondition | Condition | VariableFragment | TimedViolationCondition | TimedInterruptCondition | TimedWaitCondition | ClockFragment;


Message returns Message:
	Message_Impl | ModalMessage;






BindingExpression returns BindingExpression:
	FeatureAccessBindingExpression | ObjectQueryBindingExpression | ParameterExpression_Impl | WildcardParameterExpression | ValueParameterExpression | VariableBindingParameterExpression;









AbstractRanges returns AbstractRanges:
	IntegerRanges | StringRanges | EnumRanges;

EString returns ecore::EString:
	STRING | ID;

DummyExprClass_Impl returns DummyExprClass:
	{DummyExprClass}
	'DummyExprClass'
	;

EPackage returns ecore::EPackage:
	{ecore::EPackage}
	'EPackage'
	name=EString
	'{'
		('nsURI' nsURI=EString)?
		('nsPrefix' nsPrefix=EString)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eClassifiers' '{' eClassifiers+=EClassifier ( "," eClassifiers+=EClassifier)* '}' )?
		('eSubpackages' '{' eSubpackages+=EPackage ( "," eSubpackages+=EPackage)* '}' )?
	'}';

EClass returns ecore::EClass:
	{ecore::EClass}
	(abstract?='abstract')?
	(interface?='interface')?
	'EClass'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('eSuperTypes' '(' eSuperTypes+=[ecore::EClass|EString] ( "," eSuperTypes+=[ecore::EClass|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eOperations' '{' eOperations+=EOperation ( "," eOperations+=EOperation)* '}' )?
		('eStructuralFeatures' '{' eStructuralFeatures+=EStructuralFeature ( "," eStructuralFeatures+=EStructuralFeature)* '}' )?
		('eGenericSuperTypes' '{' eGenericSuperTypes+=EGenericType ( "," eGenericSuperTypes+=EGenericType)* '}' )?
	'}';

Collaboration returns Collaboration:
	{Collaboration}
	'Collaboration'
	name=EString
	'{'
		('domains' '(' domains+=[ecore::EPackage|EString] ( "," domains+=[ecore::EPackage|EString])* ')' )?
		('contexts' '(' contexts+=[ecore::EPackage|EString] ( "," contexts+=[ecore::EPackage|EString])* ')' )?
		('imports' '{' imports+=DummyExprClass ( "," imports+=DummyExprClass)* '}' )?
		('roles' '{' roles+=Role ( "," roles+=Role)* '}' )?
		('scenarios' '{' scenarios+=Scenario ( "," scenarios+=Scenario)* '}' )?
	'}';

EventParameterRanges returns EventParameterRanges:
	{EventParameterRanges}
	'EventParameterRanges'
	'{'
		('event' event=[ecore::ETypedElement|EString])?
		('rangesForParameter' '{' rangesForParameter+=RangesForParameter ( "," rangesForParameter+=RangesForParameter)* '}' )?
	'}';

ChannelOptions returns ChannelOptions:
	{ChannelOptions}
	(allMessagesRequireLinks?='allMessagesRequireLinks')?
	'ChannelOptions'
	'{'
		('messageChannels' '{' messageChannels+=MessageChannel ( "," messageChannels+=MessageChannel)* '}' )?
	'}';

Interaction returns Interaction:
	{Interaction}
	'Interaction'
	'{'
		('fragments' '{' fragments+=InteractionFragment ( "," fragments+=InteractionFragment)* '}' )?
		('constraints' constraints=ConstraintBlock)?
	'}';

ConstraintBlock returns ConstraintBlock:
	{ConstraintBlock}
	'ConstraintBlock'
	'{'
		('consider' '{' consider+=Message ( "," consider+=Message)* '}' )?
		('ignore' '{' ignore+=Message ( "," ignore+=Message)* '}' )?
		('interrupt' '{' interrupt+=Message ( "," interrupt+=Message)* '}' )?
		('forbidden' '{' forbidden+=Message ( "," forbidden+=Message)* '}' )?
	'}';

ModalMessage returns ModalMessage:
	{ModalMessage}
	(strict?='strict')?
	(monitored?='monitored')?
	'ModalMessage'
	'{'
		('collectionModification' collectionModification=DummyDatatype)?
		('expectationKind' expectationKind=ExpectationKind)?
		('receiver' receiver=[Role|EString])?
		('sender' sender=[Role|EString])?
		('modelElement' modelElement=[ecore::ETypedElement|EString])?
		('parameters' '{' parameters+=ParameterBinding ( "," parameters+=ParameterBinding)* '}' )?
	'}';

Alternative returns Alternative:
	{Alternative}
	'Alternative'
	'{'
		('cases' '{' cases+=Case ( "," cases+=Case)* '}' )?
	'}';

Loop returns Loop:
	{Loop}
	'Loop'
	'{'
		('bodyInteraction' bodyInteraction=Interaction)?
		('loopCondition' loopCondition=Condition)?
	'}';

Parallel returns Parallel:
	{Parallel}
	'Parallel'
	'{'
		('parallelInteraction' '{' parallelInteraction+=Interaction ( "," parallelInteraction+=Interaction)* '}' )?
	'}';

WaitCondition returns WaitCondition:
	{WaitCondition}
	(strict?='strict')?
	(requested?='requested')?
	'WaitCondition'
	'{'
		('conditionExpression' conditionExpression=ConditionExpression)?
	'}';

InterruptCondition returns InterruptCondition:
	{InterruptCondition}
	'InterruptCondition'
	'{'
		('conditionExpression' conditionExpression=ConditionExpression)?
	'}';

ViolationCondition returns ViolationCondition:
	{ViolationCondition}
	'ViolationCondition'
	'{'
		('conditionExpression' conditionExpression=ConditionExpression)?
	'}';

Condition returns Condition:
	{Condition}
	'Condition'
	'{'
		('conditionExpression' conditionExpression=ConditionExpression)?
	'}';

VariableFragment returns VariableFragment:
	{VariableFragment}
	'VariableFragment'
	'{'
		('expression' expression=DummyExprClass)?
	'}';

TimedViolationCondition returns TimedViolationCondition:
	{TimedViolationCondition}
	'TimedViolationCondition'
	'{'
		('timedConditionExpression' timedConditionExpression=DummyExprClass)?
	'}';

TimedInterruptCondition returns TimedInterruptCondition:
	{TimedInterruptCondition}
	'TimedInterruptCondition'
	'{'
		('timedConditionExpression' timedConditionExpression=DummyExprClass)?
	'}';

TimedWaitCondition returns TimedWaitCondition:
	{TimedWaitCondition}
	(requested?='requested')?
	(strict?='strict')?
	'TimedWaitCondition'
	'{'
		('timedConditionExpression' timedConditionExpression=DummyExprClass)?
	'}';

ClockFragment returns ClockFragment:
	{ClockFragment}
	'ClockFragment'
	'{'
		('expression' expression=[DummyExprClass|EString])?
	'}';

Role returns Role:
	{Role}
	(static?='static')?
	(multiRole?='multiRole')?
	'Role'
	name=EString
	'{'
		('type' type=[ecore::EClassifier|EString])?
	'}';

ParameterBinding returns ParameterBinding:
	{ParameterBinding}
	'ParameterBinding'
	'{'
		('bindingExpression' bindingExpression=BindingExpression)?
	'}';

DummyDatatype returns DummyDatatype:
	'DummyDatatype' /* TODO: implement this rule and an appropriate IValueConverter */;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum ExpectationKind returns ExpectationKind:
				none = 'none' | eventually = 'eventually' | urgent = 'urgent' | requested = 'requested' | committed = 'committed';

EAnnotation returns ecore::EAnnotation:
	{ecore::EAnnotation}
	'EAnnotation'
	'{'
		('source' source=EString)?
		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('details' '{' details+=EStringToStringMapEntry ( "," details+=EStringToStringMapEntry)* '}' )?
		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
	'}';

ETypeParameter returns ecore::ETypeParameter:
	{ecore::ETypeParameter}
	'ETypeParameter'
	name=EString
	'{'
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eBounds' '{' eBounds+=EGenericType ( "," eBounds+=EGenericType)* '}' )?
	'}';

EDataType_Impl returns ecore::EDataType:
	{ecore::EDataType}
	'EDataType'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('serializable' serializable=EBoolean)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
	'}';

EEnum returns ecore::EEnum:
	{ecore::EEnum}
	'EEnum'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('serializable' serializable=EBoolean)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eLiterals' '{' eLiterals+=EEnumLiteral ( "," eLiterals+=EEnumLiteral)* '}' )?
	'}';

EStringToStringMapEntry returns ecore::EStringToStringMapEntry:
	{ecore::EStringToStringMapEntry}
	'EStringToStringMapEntry'
	'{'
		('key' key=EString)?
		('value' value=EString)?
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

EGenericType returns ecore::EGenericType:
	{ecore::EGenericType}
	'EGenericType'
	'{'
		('eTypeParameter' eTypeParameter=[ecore::ETypeParameter|EString])?
		('eClassifier' eClassifier=[ecore::EClassifier|EString])?
		('eUpperBound' eUpperBound=EGenericType)?
		('eTypeArguments' '{' eTypeArguments+=EGenericType ( "," eTypeArguments+=EGenericType)* '}' )?
		('eLowerBound' eLowerBound=EGenericType)?
	'}';

EEnumLiteral returns ecore::EEnumLiteral:
	{ecore::EEnumLiteral}
	'EEnumLiteral'
	name=EString
	'{'
		('value' value=EInt)?
		('literal' literal=EString)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

FeatureAccessBindingExpression returns FeatureAccessBindingExpression:
	{FeatureAccessBindingExpression}
	'FeatureAccessBindingExpression'
	'{'
		('featureaccess' featureaccess=DummyExprClass)?
	'}';

ObjectQueryBindingExpression returns ObjectQueryBindingExpression:
	{ObjectQueryBindingExpression}
	'ObjectQueryBindingExpression'
	'{'
		('queryClass' queryClass=[ecore::EClass|EString])?
		('queryValues' '{' queryValues+=ObjectQueryValue ( "," queryValues+=ObjectQueryValue)* '}' )?
	'}';

ParameterExpression_Impl returns ParameterExpression:
	{ParameterExpression}
	'ParameterExpression'
	;

WildcardParameterExpression returns WildcardParameterExpression:
	{WildcardParameterExpression}
	'WildcardParameterExpression'
	;

ValueParameterExpression returns ValueParameterExpression:
	{ValueParameterExpression}
	'ValueParameterExpression'
	'{'
		('value' value=DummyExprClass)?
	'}';

VariableBindingParameterExpression returns VariableBindingParameterExpression:
	{VariableBindingParameterExpression}
	'VariableBindingParameterExpression'
	'{'
		('variable' variable=DummyExprClass)?
	'}';

ObjectQueryValue returns ObjectQueryValue:
	{ObjectQueryValue}
	'ObjectQueryValue'
	'{'
		('feature' feature=[ecore::EStructuralFeature|EString])?
		('expression' expression=DummyExprClass)?
	'}';

EAttribute returns ecore::EAttribute:
	{ecore::EAttribute}
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(iD?='iD')?
	'EAttribute'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('changeable' changeable=EBoolean)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EReference returns ecore::EReference:
	{ecore::EReference}
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(containment?='containment')?
	'EReference'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('changeable' changeable=EBoolean)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('resolveProxies' resolveProxies=EBoolean)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eOpposite' eOpposite=[ecore::EReference|EString])?
		('eKeys' '(' eKeys+=[ecore::EAttribute|EString] ( "," eKeys+=[ecore::EAttribute|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

Case returns Case:
	{Case}
	'Case'
	'{'
		('caseInteraction' caseInteraction=Interaction)?
		('caseCondition' caseCondition=Condition)?
	'}';

ConditionExpression returns ConditionExpression:
	{ConditionExpression}
	'ConditionExpression'
	'{'
		('expression' expression=DummyExprClass)?
	'}';

Message_Impl returns Message:
	{Message}
	'Message'
	'{'
		('collectionModification' collectionModification=DummyDatatype)?
		('receiver' receiver=[Role|EString])?
		('sender' sender=[Role|EString])?
		('modelElement' modelElement=[ecore::ETypedElement|EString])?
		('parameters' '{' parameters+=ParameterBinding ( "," parameters+=ParameterBinding)* '}' )?
	'}';

EOperation returns ecore::EOperation:
	{ecore::EOperation}
	'EOperation'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eExceptions' '(' eExceptions+=[ecore::EClassifier|EString] ( "," eExceptions+=[ecore::EClassifier|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eParameters' '{' eParameters+=EParameter ( "," eParameters+=EParameter)* '}' )?
		('eGenericExceptions' '{' eGenericExceptions+=EGenericType ( "," eGenericExceptions+=EGenericType)* '}' )?
	'}';

EParameter returns ecore::EParameter:
	{ecore::EParameter}
	'EParameter'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

Scenario returns Scenario:
	(singular?='singular')?
	optimizeCost?='optimizeCost'
	'Scenario'
	name=EString
	'{'
		('kind' kind=ScenarioKind)?
		'cost' cost=EDouble
		('contexts' '(' contexts+=[ecore::EClass|EString] ( "," contexts+=[ecore::EClass|EString])* ')' )?
		('roleBindings' '{' roleBindings+=RoleBindingConstraint ( "," roleBindings+=RoleBindingConstraint)* '}' )?
		('ownedInteraction' ownedInteraction=Interaction)?
	'}';

enum ScenarioKind returns ScenarioKind:
				assumption = 'assumption' | guarantee = 'guarantee' | existential = 'existential';

RoleBindingConstraint returns RoleBindingConstraint:
	{RoleBindingConstraint}
	'RoleBindingConstraint'
	'{'
		('role' role=[Role|EString])?
		('bindingExpression' bindingExpression=BindingExpression)?
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

RangesForParameter returns RangesForParameter:
	{RangesForParameter}
	'RangesForParameter'
	'{'
		('parameter' parameter=[ecore::ETypedElement|EString])?
		('ranges' ranges=AbstractRanges)?
	'}';

IntegerRanges returns IntegerRanges:
	{IntegerRanges}
	'IntegerRanges'
	'{'
		('min' min=EInt)?
		('max' max=EInt)?
		('values' '{' values+=EInt ( "," values+=EInt)* '}' )?
	'}';

StringRanges returns StringRanges:
	{StringRanges}
	'StringRanges'
	'{'
		('values' '{' values+=EString ( "," values+=EString)* '}' )?
	'}';

EnumRanges returns EnumRanges:
	{EnumRanges}
	'EnumRanges'
	'{'
		('values' '(' values+=[ecore::EEnumLiteral|EString] ( "," values+=[ecore::EEnumLiteral|EString])* ')' )?
	'}';

MessageChannel returns MessageChannel:
	{MessageChannel}
	'MessageChannel'
	'{'
		('event' event=[ecore::ETypedElement|EString])?
		('channelFeature' channelFeature=[ecore::EStructuralFeature|EString])?
	'}';
