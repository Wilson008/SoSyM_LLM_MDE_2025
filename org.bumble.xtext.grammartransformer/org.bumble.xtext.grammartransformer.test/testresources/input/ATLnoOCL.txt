// automatically generated by Xtext
grammar org.xtext.AtlNoOCL with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/gmt/2005/ATLnoOCL" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Root returns Root:
	{Root}
	'Root'
	'{'
		('unit' unit=Unit)?
	'}';

Unit returns Unit:
	Library | Query | Module;




ModuleElement returns ModuleElement:
	Helper | MatchedRule_Impl | LazyMatchedRule | CalledRule;





MatchedRule returns MatchedRule:
	MatchedRule_Impl | LazyMatchedRule;

OutPatternElement returns OutPatternElement:
	SimpleOutPatternElement | ForEachOutPatternElement;

Statement returns Statement:
	ExpressionStat | BindingStat | IfStat | ForStat;

InPatternElement returns InPatternElement:
	SimpleInPatternElement;


EString returns ecore::EString:
	STRING | ID;

LibraryRef returns LibraryRef:
	{LibraryRef}
	'LibraryRef'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
	'}';

Library returns Library:
	{Library}
	'Library'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('libraries' '{' libraries+=LibraryRef ( "," libraries+=LibraryRef)* '}' )?
		('helpers' '{' helpers+=Helper ( "," helpers+=Helper)* '}' )?
	'}';

Query returns Query:
	'Query'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('libraries' '{' libraries+=LibraryRef ( "," libraries+=LibraryRef)* '}' )?
		'body' body=OCLDummy
		('helpers' '{' helpers+=Helper ( "," helpers+=Helper)* '}' )?
	'}';

Module returns Module:
	isRefining?='isRefining'
	'Module'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('libraries' '{' libraries+=LibraryRef ( "," libraries+=LibraryRef)* '}' )?
		'inModels' '{' inModels+=OCLDummy ( "," inModels+=OCLDummy)* '}' 
		'outModels' '{' outModels+=OCLDummy ( "," outModels+=OCLDummy)* '}' 
		('elements' '{' elements+=ModuleElement ( "," elements+=ModuleElement)* '}' )?
	'}';

Helper returns Helper:
	'Helper'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'definition' definition=OCLDummy
	'}';

OCLDummy returns OCLDummy:
	{OCLDummy}
	'OCLDummy'
	name=EString;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

MatchedRule_Impl returns MatchedRule:
	isAbstract?='isAbstract'
	isRefining?='isRefining'
	isNoDefault?='isNoDefault'
	'MatchedRule'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('children' '(' children+=[MatchedRule|EString] ( "," children+=[MatchedRule|EString])* ')' )?
		('superRule' superRule=[MatchedRule|EString])?
		('outPattern' outPattern=OutPattern)?
		('actionBlock' actionBlock=ActionBlock)?
		('variables' '{' variables+=RuleVariableDeclaration ( "," variables+=RuleVariableDeclaration)* '}' )?
		('inPattern' inPattern=InPattern)?
	'}';

LazyMatchedRule returns LazyMatchedRule:
	isAbstract?='isAbstract'
	isRefining?='isRefining'
	isNoDefault?='isNoDefault'
	isUnique?='isUnique'
	'LazyMatchedRule'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('children' '(' children+=[MatchedRule|EString] ( "," children+=[MatchedRule|EString])* ')' )?
		('superRule' superRule=[MatchedRule|EString])?
		('outPattern' outPattern=OutPattern)?
		('actionBlock' actionBlock=ActionBlock)?
		('variables' '{' variables+=RuleVariableDeclaration ( "," variables+=RuleVariableDeclaration)* '}' )?
		('inPattern' inPattern=InPattern)?
	'}';

CalledRule returns CalledRule:
	isEntrypoint?='isEntrypoint'
	isEndpoint?='isEndpoint'
	'CalledRule'
	name=EString
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('outPattern' outPattern=OutPattern)?
		('actionBlock' actionBlock=ActionBlock)?
		('variables' '{' variables+=RuleVariableDeclaration ( "," variables+=RuleVariableDeclaration)* '}' )?
		('parameters' '{' parameters+=OCLDummy ( "," parameters+=OCLDummy)* '}' )?
	'}';

OutPattern returns OutPattern:
	'OutPattern'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'elements' '{' elements+=OutPatternElement ( "," elements+=OutPatternElement)* '}' 
	'}';

ActionBlock returns ActionBlock:
	{ActionBlock}
	'ActionBlock'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
	'}';

RuleVariableDeclaration returns RuleVariableDeclaration:
	{RuleVariableDeclaration}
	'RuleVariableDeclaration'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('id' id=EString)?
		('varName' varName=EString)?
		('type' type=[OCLDummy|EString])?
		('initExpression' initExpression=[OCLDummy|EString])?
		('letExp' letExp=[OCLDummy|EString])?
		('baseExp' baseExp=[OCLDummy|EString])?
		('variableExp' '(' variableExp+=[OCLDummy|EString] ( "," variableExp+=[OCLDummy|EString])* ')' )?
	'}';

Binding returns Binding:
	isAssignment?='isAssignment'
	'Binding'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'propertyName' propertyName=EString
		'value' value=OCLDummy
	'}';

SimpleOutPatternElement returns SimpleOutPatternElement:
	{SimpleOutPatternElement}
	'SimpleOutPatternElement'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('id' id=EString)?
		('varName' varName=EString)?
		('type' type=[OCLDummy|EString])?
		('initExpression' initExpression=[OCLDummy|EString])?
		('letExp' letExp=[OCLDummy|EString])?
		('baseExp' baseExp=[OCLDummy|EString])?
		('variableExp' variableExp=[OCLDummy|EString])?
		('sourceElement' sourceElement=[InPatternElement|EString])?
		('model' model=[OCLDummy|EString])?
		('bindings' '{' bindings+=Binding ( "," bindings+=Binding)* '}' )?
		('reverseBindings' '{' reverseBindings+=OCLDummy ( "," reverseBindings+=OCLDummy)* '}' )?
	'}';

ForEachOutPatternElement returns ForEachOutPatternElement:
	'ForEachOutPatternElement'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('id' id=EString)?
		('varName' varName=EString)?
		('type' type=[OCLDummy|EString])?
		('initExpression' initExpression=[OCLDummy|EString])?
		('letExp' letExp=[OCLDummy|EString])?
		('baseExp' baseExp=[OCLDummy|EString])?
		('variableExp' variableExp=[OCLDummy|EString])?
		('sourceElement' sourceElement=[InPatternElement|EString])?
		('model' model=[OCLDummy|EString])?
		('bindings' '{' bindings+=Binding ( "," bindings+=Binding)* '}' )?
		'collection' collection=OCLDummy
		'iterator' iterator=OCLDummy
	'}';

SimpleInPatternElement returns SimpleInPatternElement:
	{SimpleInPatternElement}
	'SimpleInPatternElement'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		('id' id=EString)?
		('varName' varName=EString)?
		('type' type=[OCLDummy|EString])?
		('initExpression' initExpression=[OCLDummy|EString])?
		('letExp' letExp=[OCLDummy|EString])?
		('baseExp' baseExp=[OCLDummy|EString])?
		('variableExp' variableExp=[OCLDummy|EString])?
		('mapsTo' mapsTo=[OutPatternElement|EString])?
		('models' '(' models+=[OCLDummy|EString] ( "," models+=[OCLDummy|EString])* ')' )?
	'}';

ExpressionStat returns ExpressionStat:
	'ExpressionStat'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'expression' expression=OCLDummy
	'}';

BindingStat returns BindingStat:
	isAssignment?='isAssignment'
	'BindingStat'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'propertyName' propertyName=EString
		'source' source=OCLDummy
		'value' value=OCLDummy
	'}';

IfStat returns IfStat:
	'IfStat'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'condition' condition=OCLDummy
		('thenStatements' '{' thenStatements+=Statement ( "," thenStatements+=Statement)* '}' )?
		('elseStatements' '{' elseStatements+=Statement ( "," elseStatements+=Statement)* '}' )?
	'}';

ForStat returns ForStat:
	'ForStat'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'iterator' iterator=OCLDummy
		'collection' collection=OCLDummy
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
	'}';

InPattern returns InPattern:
	'InPattern'
	'{'
		('location' location=EString)?
		('commentsBefore' '{' commentsBefore+=EString ( "," commentsBefore+=EString)* '}' )?
		('commentsAfter' '{' commentsAfter+=EString ( "," commentsAfter+=EString)* '}' )?
		'elements' '{' elements+=InPatternElement ( "," elements+=InPatternElement)* '}' 
		('filter' filter=OCLDummy)?
	'}';
