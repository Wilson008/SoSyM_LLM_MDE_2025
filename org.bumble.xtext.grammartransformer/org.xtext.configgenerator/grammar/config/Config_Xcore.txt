go.removeImport(null);
go.addImport("http://www.eclipse.org/emf/2002/Ecore", null);
go.addImport("http://www.eclipse.org/emf/2002/GenModel", "genmodel");
go.addImport("http://www.eclipse.org/xtext/xbase/Xbase", "xbase");
go.addImport("http://www.eclipse.org/xtext/common/JavaVMTypes", "javaVMTypes");
go.addImport("http://www.eclipse.org/xtext/xbase/Xtype", "xtype");
go.addImport("http://www.eclipse.org/emf/2011/Xcore", null);
go.renameKeyword("XPackage", null, "XPackage", "package", null);
go.changeTypeOfAttr("XPackage", "name", "EString", "QualifiedName");
go.removeOptionality("XPackage", "annotations");
go.removeKeyword("XPackage", "annotations", "annotations", null);
go.removeBraces("XPackage", "annotations", null);
go.removeComma("XPackage", "annotations", null);
go.convert1toStarToStar("XPackage", "annotations");
go.removeOptionality("XPackage", "importDirectives");
go.removeKeyword("XPackage", "importDirectives", "importDirectives", null);
go.removeBraces("XPackage", "importDirectives", null);
go.removeComma("XPackage", "importDirectives", null);
go.convert1toStarToStar("XPackage", "importDirectives");
go.removeOptionality("XPackage", "annotationDirectives");
go.removeKeyword("XPackage", "annotationDirectives", "annotationDirectives", null);
go.removeBraces("XPackage", "annotationDirectives", null);
go.removeComma("XPackage", "annotationDirectives", null);
go.convert1toStarToStar("XPackage", "annotationDirectives");
go.removeOptionality("XPackage", "classifiers");
go.removeKeyword("XPackage", "classifiers", "classifiers", null);
go.removeBraces("XPackage", "classifiers", null);
go.removeComma("XPackage", "classifiers", null);
go.convert1toStarToStar("XPackage", "classifiers");
go.removeContainerBraces("XPackage");
go.changeCalledRule("XClassifier", "XDataType_Impl", "XDataType");
go.removeAction("XAnnotation");
go.removeKeyword("XAnnotation", null, "XAnnotation", null);
go.removeOptionality("XAnnotation", "source");
go.removeKeyword("XAnnotation", "source", "source", null);
go.addSymbolToAttr("XAnnotation", "source", "@", true, null, true, true);
go.changeTypeOfAttr("XAnnotation", "source", "EString", "XQualifiedName");
go.removeAttribute("XAnnotation", "annotations");
go.removeKeyword("XAnnotation", "details", "details", null);
go.changeBracesToParentheses("XAnnotation", "details");
go.moveLine("XAnnotation", "source", "details", true);
go.moveLine("XAnnotation", "details", "source", false);
go.removeContainerBraces("XAnnotation");
go.removeRule("EString");
go.removeAction("XImportDirective");
go.removeKeyword("XImportDirective", null, "XImportDirective", null);
go.renameKeyword("XImportDirective", "importedNamespace", "importedNamespace", "import", null);
go.changeTypeOfAttr("XImportDirective", "importedNamespace", "EString", "QualifiedNameWithWildcard");
go.removeKeyword("XImportDirective", "importedObject", "importedObject", null);
go.changeTypeOfAttr("XImportDirective", "importedObject", "EString", "QualifiedName");
go.removeAttribute("XImportDirective", "annotations");
go.changeOptionalAttrToOrRelation("XImportDirective", false, "importedNamespace", "importedObject");
go.moveLine("XImportDirective", "importedNamespace", "importedObject", true);
go.removeContainerBraces("XImportDirective");
go.removeAction("XAnnotationDirective");
go.removeKeyword("XAnnotationDirective", null, "XAnnotationDirective", null);
go.changeTypeOfAttr("XAnnotationDirective", "name", "EString", "ValidID");
go.removeOptionality("XAnnotationDirective", "sourceURI");
go.renameKeyword("XAnnotationDirective", "sourceURI", "sourceURI", "annotation", null);
go.addKeywordToLine("XAnnotationDirective", "sourceURI", "as", false);
go.changeTypeOfAttr("XAnnotationDirective", "sourceURI", "EString", "STRING");
go.removeAttribute("XAnnotationDirective", "annotations");
go.moveLine("XAnnotationDirective", "sourceURI", "name", true);
go.moveLine("XAnnotationDirective", "name", "sourceURI", false);
go.removeContainerBraces("XAnnotationDirective");
go.removeAction("XStringToStringMapEntry");
go.removeKeyword("XStringToStringMapEntry", null, "XStringToStringMapEntry", null);
go.removeOptionality("XStringToStringMapEntry", "key");
go.removeKeyword("XStringToStringMapEntry", "key", "key", null);
go.addSymbolToAttr("XStringToStringMapEntry", "key", "=", false, null, true, true);
go.changeTypeOfAttr("XStringToStringMapEntry", "key", "EString", "QualifiedName");
go.removeOptionality("XStringToStringMapEntry", "value");
go.removeKeyword("XStringToStringMapEntry", "value", "value", null);
go.changeTypeOfAttr("XStringToStringMapEntry", "value", "EString", "STRING");
go.moveLine("XStringToStringMapEntry", "key", "value", true);
go.removeContainerBraces("XStringToStringMapEntry");
go.removeRule("EObject");
go.removeRule("EClass");
go.removeAction("XTypeParameter");
go.removeKeyword("XTypeParameter", null, "XTypeParameter", null);
go.addKeywordToLine("XTypeParameter", "name", "extends", false);
go.changeTypeOfAttr("XTypeParameter", "name", "EString", "ID");
go.removeOptionality("XTypeParameter", "annotations");
go.removeKeyword("XTypeParameter", "annotations", "annotations", null);
go.removeBraces("XTypeParameter", "annotations", null);
go.removeComma("XTypeParameter", "annotations", null);
go.convert1toStarToStar("XTypeParameter", "annotations");
go.removeKeyword("XTypeParameter", "bounds", "bounds", null);
go.removeBraces("XTypeParameter", "bounds", null);
go.removeComma("XTypeParameter", "bounds", null);
go.moveLine("XTypeParameter", "annotations", "name", true);
go.moveLine("XTypeParameter", "name", "annotations", false);
go.moveLine("XTypeParameter", "bounds", "name", false);
go.removeContainerBraces("XTypeParameter");
go.removeKeyword("XClass", null, "XClass", null);
go.removeOptionality("XClass", "abstract");
go.removeAttribute("XClass", "interface");
go.changeTypeOfAttr("XClass", "name", "EString", "ID");
go.removeOptionality("XClass", "annotations");
go.removeKeyword("XClass", "annotations", "annotations", null);
go.removeBraces("XClass", "annotations", null);
go.removeComma("XClass", "annotations", null);
go.convert1toStarToStar("XClass", "annotations");
go.removeOptionality("XClass", "instanceType");
go.renameKeyword("XClass", "instanceType", "instanceType", "wraps", null);
go.changeTypeOfAttr("XClass", "instanceType", "EClass", "JvmTypeReference");
go.removeKeyword("XClass", "typeParameters", "typeParameters", null);
go.removeBraces("XClass", "typeParameters", null);
go.removeOptionality("XClass", "members");
go.removeKeyword("XClass", "members", "members", null);
go.removeBraces("XClass", "members", null);
go.removeComma("XClass", "members", null);
go.convert1toStarToStar("XClass", "members");
go.renameKeyword("XClass", "superTypes", "superTypes", "extends", null);
go.removeBraces("XClass", "superTypes", null);
go.moveLine("XClass", "annotations", "name", true);
go.moveLine("XClass", "name", "annotations", false);
go.moveLine("XClass", "typeParameters", "name", false);
go.moveLine("XClass", "superTypes", "typeParameters", false);
go.moveLine("XClass", "instanceType", "superTypes", false);
go.moveLine("XClass", "{", "instanceType", false);
go.moveLine("XClass", "members", "{", false);
go.moveLine("XClass", "}", "members", false);
go.renameRule("XDataType_Impl", "XDataType");
go.removeAction("XDataType");
go.removeKeyword("XDataType", null, "XDataType", null);
go.addKeywordToLine("XDataType_Impl", "name", "type", true);
go.changeTypeOfAttr("XDataType_Impl", "name", "EString", "ID");
go.renameKeyword("XDataType_Impl", "serializable", "serializable", "create", null);
go.changeTypeOfAttr("XDataType_Impl", "serializable", "EBoolean", "null");
go.removeOptionality("XDataType_Impl", "annotations");
go.removeKeyword("XDataType_Impl", "annotations", "annotations", null);
go.removeBraces("XDataType_Impl", "annotations", null);
go.removeComma("XDataType_Impl", "annotations", null);
go.convert1toStarToStar("XDataType_Impl", "annotations");
go.removeOptionality("XDataType_Impl", "instanceType");
go.renameKeyword("XDataType_Impl", "instanceType", "instanceType", "wraps", null);
go.changeTypeOfAttr("XDataType_Impl", "instanceType", "EClass", "JvmTypeReference");
go.removeKeyword("XDataType_Impl", "typeParameters", "typeParameters", null);
go.removeBraces("XDataType_Impl", "typeParameters", null);
go.renameKeyword("XDataType_Impl", "createBody", "createBody", "create", null);
go.changeTypeOfAttr("XDataType_Impl", "createBody", "EClass0", "XBlockExpression");
go.renameKeyword("XDataType_Impl", "convertBody", "convertBody", "convert", null);
go.changeTypeOfAttr("XDataType_Impl", "convertBody", "EClass1", "XBlockExpression");
go.moveLine("XDataType_Impl", "annotations", "name", true);
go.moveLine("XDataType_Impl", "name", "annotations", false);
go.moveLine("XDataType_Impl", "typeParameters", "name", false);
go.moveLine("XDataType_Impl", "instanceType", "typeParameters", false);
go.removeContainerBraces("XDataType_Impl");
go.removeAction("XEnum");
go.removeKeyword("XEnum", null, "XEnum", null);
go.addKeywordToLine("XEnum", "name", "enum", true);
go.changeTypeOfAttr("XEnum", "name", "EString", "ID");
go.removeAttribute("XEnum", "serializable");
go.removeOptionality("XEnum", "annotations");
go.removeKeyword("XEnum", "annotations", "annotations", null);
go.removeBraces("XEnum", "annotations", null);
go.removeComma("XEnum", "annotations", null);
go.convert1toStarToStar("XEnum", "annotations");
go.removeAttribute("XEnum", "instanceType");
go.removeAttribute("XEnum", "typeParameters");
go.removeAttribute("XEnum", "createBody");
go.removeAttribute("XEnum", "convertBody");
go.removeKeyword("XEnum", "literals", "literals", null);
go.removeBraces("XEnum", "literals", null);
go.moveLine("XEnum", "annotations", "name", true);
go.moveLine("XEnum", "name", "annotations", false);
go.moveLine("XEnum", "literals", "{", false);
go.removeAction("XGenericType");
go.removeKeyword("XGenericType", null, "XGenericType", null);
go.removeOptionality("XGenericType", "type");
go.removeKeyword("XGenericType", "type", "type", null);
go.removeAttribute("XGenericType", "upperBound");
go.removeKeyword("XGenericType", "typeArguments", "typeArguments", null);
go.removeBraces("XGenericType", "typeArguments", null);
go.changeTypeOfAttr("XGenericType", "typeArguments", "XGenericType", "XGenericTypeArgument");
go.removeAttribute("XGenericType", "lowerBound");
go.moveLine("XGenericType", "type", "typeArguments", true);
go.moveLine("XGenericType", "typeArguments", "type", false);
go.removeContainerBraces("XGenericType");
go.removeRule("EClass2");
go.removeRule("EBoolean");
go.removeAction("XAttribute");
go.removeKeyword("XAttribute", null, "XAttribute", null);
go.changeTypeOfAttr("XAttribute", "name", "EString", "ID");
go.removeOptionality("XAttribute", "multiplicity");
go.removeKeyword("XAttribute", "multiplicity", "multiplicity", null);
go.removeOptionality("XAttribute", "defaultValueLiteral");
go.addKeywordToLine("XAttribute", "defaultValueLiteral", "this", false);
go.addKeywordToLine("XAttribute", "defaultValueLiteral", "get", false);
go.changeTypeOfAttr("XAttribute", "defaultValueLiteral", "EString", "STRING");
go.addKeywordToLine("XAttribute", "annotations", "unordered", false);
go.addKeywordToLine("XAttribute", "annotations", "unique", false);
go.addKeywordToLine("XAttribute", "annotations", "readonly", false);
go.addKeywordToLine("XAttribute", "annotations", "transient", false);
go.addKeywordToLine("XAttribute", "annotations", "volatile", false);
go.addKeywordToLine("XAttribute", "annotations", "unsettable", false);
go.addKeywordToLine("XAttribute", "annotations", "derived", false);
go.addKeywordToLine("XAttribute", "annotations", "id", false);
go.removeBraces("XAttribute", "annotations", null);
go.removeComma("XAttribute", "annotations", null);
go.convert1toStarToStar("XAttribute", "annotations");
go.removeOptionality("XAttribute", "type");
go.removeKeyword("XAttribute", "type", "type", null);
go.removeOptionality("XAttribute", "getBody");
go.renameKeyword("XAttribute", "getBody", "getBody", "set", null);
go.changeTypeOfAttr("XAttribute", "getBody", "EClass3", "XBlockExpression");
go.removeOptionality("XAttribute", "setBody");
go.renameKeyword("XAttribute", "setBody", "setBody", "isSet", null);
go.changeTypeOfAttr("XAttribute", "setBody", "EClass4", "XBlockExpression");
go.removeOptionality("XAttribute", "isSetBody");
go.renameKeyword("XAttribute", "isSetBody", "isSetBody", "unset", null);
go.changeTypeOfAttr("XAttribute", "isSetBody", "EClass5", "XBlockExpression");
go.removeOptionality("XAttribute", "unsetBody");
go.removeKeyword("XAttribute", "unsetBody", "unsetBody", null);
go.changeTypeOfAttr("XAttribute", "unsetBody", "EClass6", "XBlockExpression");
go.moveLine("XAttribute", "annotations", "type", true);
go.moveLine("XAttribute", "multiplicity", "type", false);
go.moveLine("XAttribute", "name", "multiplicity", false);
go.moveLine("XAttribute", "defaultValueLiteral", "name", false);
go.moveLine("XAttribute", "getBody", "defaultValueLiteral", false);
go.removeContainerBraces("XAttribute");
go.renameKeyword("XOperation", null, "XOperation", "op", null);
go.changeTypeOfAttr("XOperation", "name", "EString", "ID");
go.removeKeyword("XOperation", "multiplicity", "multiplicity", null);
go.removeKeyword("XOperation", "annotations", "annotations", null);
go.removeBraces("XOperation", "annotations", null);
go.removeComma("XOperation", "annotations", null);
go.convert1toStarToStar("XOperation", "annotations");
go.renameKeyword("XOperation", "type", "type", "void", null);
go.removeKeyword("XOperation", "typeParameters", "typeParameters", null);
go.removeBraces("XOperation", "typeParameters", null);
go.removeKeyword("XOperation", "parameters", "parameters", null);
go.changeBracesToParentheses("XOperation", "parameters");
go.renameKeyword("XOperation", "exceptions", "exceptions", "throws", null);
go.removeBraces("XOperation", "exceptions", null);
go.removeKeyword("XOperation", "body", "body", null);
go.changeTypeOfAttr("XOperation", "body", "EClass7", "XBlockExpression");
go.changeOptionalAttrToOrRelation("XOperation", false, "type", "multiplicity");
go.moveLine("XOperation", "unordered", "unique", true);
go.moveLine("XOperation", "typeParameters", "type", true);
go.moveLine("XOperation", "type", "typeParameters", false);
go.moveLine("XOperation", "multiplicity", "type", false);
go.moveLine("XOperation", "name", "multiplicity", false);
go.moveLine("XOperation", "parameters", "name", false);
go.removeContainerBraces("XOperation");
go.removeAction("XReference");
go.removeKeyword("XReference", null, "XReference", null);
go.addKeywordToLine("XReference", "name", "opposite", false);
go.changeTypeOfAttr("XReference", "name", "EString", "ID");
go.removeKeyword("XReference", "multiplicity", "multiplicity", null);
go.renameKeyword("XReference", "opposite", "opposite", "keys", null);
go.addKeywordToLine("XReference", "keys", "this", false);
go.addKeywordToLine("XReference", "keys", "get", false);
go.removeParenthesesInSpecifiedAttr("XReference", "keys");
go.addKeywordToLine("XReference", "annotations", "contains", false);
go.addKeywordToLine("XReference", "annotations", "resolving", false);
go.addKeywordToLine("XReference", "annotations", "resolving", false);
go.addKeywordToLine("XReference", "annotations", "contains", false);
go.addKeywordToLine("XReference", "annotations", "container", false);
go.addKeywordToLine("XReference", "annotations", "resolving", false);
go.addKeywordToLine("XReference", "annotations", "resolving", false);
go.addKeywordToLine("XReference", "annotations", "container", false);
go.addKeywordToLine("XReference", "annotations", "refers", false);
go.addKeywordToLine("XReference", "annotations", "local", false);
go.addKeywordToLine("XReference", "annotations", "local", false);
go.addKeywordToLine("XReference", "annotations", "refers", false);
go.addKeywordToLine("XReference", "annotations", "unordered", false);
go.addKeywordToLine("XReference", "annotations", "unique", false);
go.addKeywordToLine("XReference", "annotations", "readonly", false);
go.addKeywordToLine("XReference", "annotations", "transient", false);
go.addKeywordToLine("XReference", "annotations", "volatile", false);
go.addKeywordToLine("XReference", "annotations", "unsettable", false);
go.addKeywordToLine("XReference", "annotations", "derived", false);
go.removeBraces("XReference", "annotations", null);
go.removeComma("XReference", "annotations", null);
go.convert1toStarToStar("XReference", "annotations");
go.removeKeyword("XReference", "type", "type", null);
go.renameKeyword("XReference", "getBody", "getBody", "set", null);
go.changeTypeOfAttr("XReference", "getBody", "EClass3", "XBlockExpression");
go.renameKeyword("XReference", "setBody", "setBody", "isSet", null);
go.changeTypeOfAttr("XReference", "setBody", "EClass4", "XBlockExpression");
go.renameKeyword("XReference", "isSetBody", "isSetBody", "unset", null);
go.changeTypeOfAttr("XReference", "isSetBody", "EClass5", "XBlockExpression");
go.removeKeyword("XReference", "unsetBody", "unsetBody", null);
go.changeTypeOfAttr("XReference", "unsetBody", "EClass6", "XBlockExpression");
go.changeOptionalAttrToOrRelation("XReference", false, "annotations", "type");
go.moveLine("XReference", "annotations", "type", true);
go.moveLine("XReference", "multiplicity", "type", false);
go.moveLine("XReference", "name", "multiplicity", false);
go.moveLine("XReference", "opposite", "name", false);
go.moveLine("XReference", "getBody", "keys", false);
go.removeContainerBraces("XReference");
go.removeRule("EClass3");
go.removeRule("EClass4");
go.removeRule("EClass5");
go.removeRule("EClass6");
go.removeAction("XParameter");
go.removeKeyword("XParameter", null, "XParameter", null);
go.removeOptionality("XParameter", "unordered");
go.removeOptionality("XParameter", "unique");
go.changeTypeOfAttr("XParameter", "name", "EString", "ID");
go.removeOptionality("XParameter", "multiplicity");
go.removeKeyword("XParameter", "multiplicity", "multiplicity", null);
go.removeOptionality("XParameter", "annotations");
go.removeKeyword("XParameter", "annotations", "annotations", null);
go.removeBraces("XParameter", "annotations", null);
go.removeComma("XParameter", "annotations", null);
go.convert1toStarToStar("XParameter", "annotations");
go.removeOptionality("XParameter", "type");
go.removeKeyword("XParameter", "type", "type", null);
go.moveLine("XParameter", "unordered", "unique", true);
go.moveLine("XParameter", "type", "multiplicity", true);
go.moveLine("XParameter", "multiplicity", "type", false);
go.moveLine("XParameter", "name", "multiplicity", false);
go.removeContainerBraces("XParameter");
go.removeRule("EClass7");
go.removeRule("EClass8");
go.removeRule("EClass9");
go.removeRule("EClass0");
go.removeRule("EClass1");
go.removeAction("XEnumLiteral");
go.removeKeyword("XEnumLiteral", null, "XEnumLiteral", null);
go.changeTypeOfAttr("XEnumLiteral", "name", "EString", "ID");
go.removeKeyword("XEnumLiteral", "value", "value", null);
go.addSymbolToAttr("XEnumLiteral", "value", "=", true, null, true, true);
go.changeTypeOfAttr("XEnumLiteral", "value", "EInt", "SignedInt");
go.renameKeyword("XEnumLiteral", "literal", "literal", "as", null);
go.changeTypeOfAttr("XEnumLiteral", "literal", "EString", "STRING");
go.removeOptionality("XEnumLiteral", "annotations");
go.removeKeyword("XEnumLiteral", "annotations", "annotations", null);
go.removeBraces("XEnumLiteral", "annotations", null);
go.removeComma("XEnumLiteral", "annotations", null);
go.convert1toStarToStar("XEnumLiteral", "annotations");
go.moveLine("XEnumLiteral", "annotations", "name", true);
go.moveLine("XEnumLiteral", "name", "annotations", false);
go.moveLine("XEnumLiteral", "literal", "name", false);
go.moveLine("XEnumLiteral", "value", "literal", false);
go.removeContainerBraces("XEnumLiteral");
go.removeRule("EInt");
go.addPrimitiveType("XDataType", null, "    (annotations+=XAnnotation)*\n    'type' name = ID\n    ('<' typeParameters+=XTypeParameter (',' typeParameters+=XTypeParameter)* '>')?\n    'wraps' instanceType=JvmTypeReference\n    (\n      /*\n       * In scope for create should be what's visible in XyzFactoryImpl and 'this' will denote the literal value.\n       * The block expression must yield null or an instance of the wrapped type.\n       */\n      (serializable?='create' createBody=XBlockExpression)? &\n      /*\n       * In scope for create should be what's visible in XyzFactoryImpl\n       * and 'this' will denote an instance of the wrapped type.\n       * The block expression must yield a java.lang.String.\n       */\n      ('convert' convertBody=XBlockExpression)?\n    )\n;", null);
go.addPrimitiveType("XMultiplicity", "XMultiplicity", "    '['\n    ('?' | '*' | '+' | (INT ('..' (INT | '?' | '*'))?))?\n    ']'\n;", null);
go.addPrimitiveType("SignedInt", "EInt", "    '-'? INT\n;\n@Override", null);
go.addPrimitiveType("XBlockExpression", "xbase::XBlockExpression", "", null);
go.addPrimitiveType("XGenericTypeArgument", "XGenericType", "    XGenericType |\n    XGenericWildcardTypeArgument\n;", null);
go.addPrimitiveType("XGenericWildcardTypeArgument", "XGenericType", "   {XGenericType}\n   '?' ('extends' upperBound=XGenericType | 'super' lowerBound=XGenericType)?\n;", null);
go.addPrimitiveType("XQualifiedName", null, "    XID ('.' XID)*\n;", null);
go.addPrimitiveType("XID", null, "    ID | 'get' | 'isSet' | 'set' | 'unset'\n;\n@Override", null);
go.addPrimitiveType("ValidID", null, "    XID | 'void'\n;\n@Override", null);
go.addPrimitiveType("FeatureCallID", null, "    ValidID | 'abstract' | 'annotation' | 'as' | 'class' | 'container' | 'contains' | 'convert' | 'create' | 'derived' | 'enum' | 'extends' | 'extension' | 'id' | 'import' | 'keys' |\n    'interface'| 'local' | 'op' | 'opposite' | 'package' | 'readonly' | 'refers' | 'resolving' | 'static' | 'throws' | 'transient' | 'unique' | 'unordered' | 'unsettable'|\n    'volatile' | 'wraps'\n;", null);
