// automatically generated by Xtext
grammar org.xtext.example.xcore.Xcore with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2011/Xcore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

XPackage returns XPackage:
	{XPackage}
	'XPackage'
	name=EString
	'{'
		('annotations' '{' annotations+=XAnnotation ( "," annotations+=XAnnotation)* '}' )?
		('importDirectives' '{' importDirectives+=XImportDirective ( "," importDirectives+=XImportDirective)* '}' )?
		('annotationDirectives' '{' annotationDirectives+=XAnnotationDirective ( "," annotationDirectives+=XAnnotationDirective)* '}' )?
		('classifiers' '{' classifiers+=XClassifier ( "," classifiers+=XClassifier)* '}' )?
	'}';




XClassifier returns XClassifier:
	XClass | XDataType_Impl | XEnum;






XMember returns XMember:
	XAttribute | XOperation | XReference;













XAnnotation returns XAnnotation:
	{XAnnotation}
	'XAnnotation'
	'{'
		('source' source=[XAnnotationDirective|EString])?
		('annotations' '{' annotations+=XAnnotation ( "," annotations+=XAnnotation)* '}' )?
		('details' '{' details+=XStringToStringMapEntry ( "," details+=XStringToStringMapEntry)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

XImportDirective returns XImportDirective:
	{XImportDirective}
	'XImportDirective'
	'{'
		('importedNamespace' importedNamespace=EString)?
		('importedObject' importedObject=[ecore::EObject|EString])?
		('annotations' '{' annotations+=XAnnotation ( "," annotations+=XAnnotation)* '}' )?
	'}';

XAnnotationDirective returns XAnnotationDirective:
	{XAnnotationDirective}
	'XAnnotationDirective'
	name=EString
	'{'
		('sourceURI' sourceURI=EString)?
		('annotations' '{' annotations+=XAnnotation ( "," annotations+=XAnnotation)* '}' )?
	'}';

XStringToStringMapEntry returns XStringToStringMapEntry:
	{XStringToStringMapEntry}
	'XStringToStringMapEntry'
	'{'
		('key' key=EString)?
		('value' value=EString)?
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

EClass returns :
	{}
	''
	;

XTypeParameter returns XTypeParameter:
	{XTypeParameter}
	'XTypeParameter'
	name=EString
	'{'
		('annotations' '{' annotations+=XAnnotation ( "," annotations+=XAnnotation)* '}' )?
		('bounds' '{' bounds+=XGenericType ( "," bounds+=XGenericType)* '}' )?
	'}';

XClass returns XClass:
	{XClass}
	(abstract?='abstract')?
	(interface?='interface')?
	'XClass'
	name=EString
	'{'
		('annotations' '{' annotations+=XAnnotation ( "," annotations+=XAnnotation)* '}' )?
		('instanceType' instanceType=EClass)?
		('typeParameters' '{' typeParameters+=XTypeParameter ( "," typeParameters+=XTypeParameter)* '}' )?
		('members' '{' members+=XMember ( "," members+=XMember)* '}' )?
		('superTypes' '{' superTypes+=XGenericType ( "," superTypes+=XGenericType)* '}' )?
	'}';

XDataType_Impl returns XDataType:
	{XDataType}
	'XDataType'
	name=EString
	'{'
		('serializable' serializable=EBoolean)?
		('annotations' '{' annotations+=XAnnotation ( "," annotations+=XAnnotation)* '}' )?
		('instanceType' instanceType=EClass)?
		('typeParameters' '{' typeParameters+=XTypeParameter ( "," typeParameters+=XTypeParameter)* '}' )?
		('createBody' createBody=EClass0)?
		('convertBody' convertBody=EClass1)?
	'}';

XEnum returns XEnum:
	{XEnum}
	'XEnum'
	name=EString
	'{'
		('serializable' serializable=EBoolean)?
		('annotations' '{' annotations+=XAnnotation ( "," annotations+=XAnnotation)* '}' )?
		('instanceType' instanceType=EClass)?
		('typeParameters' '{' typeParameters+=XTypeParameter ( "," typeParameters+=XTypeParameter)* '}' )?
		('createBody' createBody=EClass0)?
		('convertBody' convertBody=EClass1)?
		('literals' '{' literals+=XEnumLiteral ( "," literals+=XEnumLiteral)* '}' )?
	'}';

XGenericType returns XGenericType:
	{XGenericType}
	'XGenericType'
	'{'
		('type' type=[|EString])?
		('upperBound' upperBound=XGenericType)?
		('typeArguments' '{' typeArguments+=XGenericType ( "," typeArguments+=XGenericType)* '}' )?
		('lowerBound' lowerBound=XGenericType)?
	'}';

EClass2 returns :
	{}
	''
	;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

XMultiplicity returns XMultiplicity:
	'XMultiplicity' /* TODO: implement this rule and an appropriate IValueConverter */;

XAttribute returns XAttribute:
	{XAttribute}
	(unordered?='unordered')?
	(unique?='unique')?
	(readonly?='readonly')?
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(iD?='iD')?
	'XAttribute'
	name=EString
	'{'
		('multiplicity' multiplicity=XMultiplicity)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('annotations' '{' annotations+=XAnnotation ( "," annotations+=XAnnotation)* '}' )?
		('type' type=XGenericType)?
		('getBody' getBody=EClass3)?
		('setBody' setBody=EClass4)?
		('isSetBody' isSetBody=EClass5)?
		('unsetBody' unsetBody=EClass6)?
	'}';

XOperation returns XOperation:
	{XOperation}
	(unordered?='unordered')?
	(unique?='unique')?
	'XOperation'
	name=EString
	'{'
		('multiplicity' multiplicity=XMultiplicity)?
		('annotations' '{' annotations+=XAnnotation ( "," annotations+=XAnnotation)* '}' )?
		('type' type=XGenericType)?
		('typeParameters' '{' typeParameters+=XTypeParameter ( "," typeParameters+=XTypeParameter)* '}' )?
		('parameters' '{' parameters+=XParameter ( "," parameters+=XParameter)* '}' )?
		('exceptions' '{' exceptions+=XGenericType ( "," exceptions+=XGenericType)* '}' )?
		('body' body=EClass7)?
	'}';

XReference returns XReference:
	{XReference}
	(unordered?='unordered')?
	(unique?='unique')?
	(readonly?='readonly')?
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(container?='container')?
	(containment?='containment')?
	(resolveProxies?='resolveProxies')?
	(local?='local')?
	'XReference'
	name=EString
	'{'
		('multiplicity' multiplicity=XMultiplicity)?
		('opposite' opposite=[|EString])?
		('keys' '(' keys+=[|EString] ( "," keys+=[|EString])* ')' )?
		('annotations' '{' annotations+=XAnnotation ( "," annotations+=XAnnotation)* '}' )?
		('type' type=XGenericType)?
		('getBody' getBody=EClass3)?
		('setBody' setBody=EClass4)?
		('isSetBody' isSetBody=EClass5)?
		('unsetBody' unsetBody=EClass6)?
	'}';

EClass3 returns :
	{}
	''
	;

EClass4 returns :
	{}
	''
	;

EClass5 returns :
	{}
	''
	;

EClass6 returns :
	{}
	''
	;

XParameter returns XParameter:
	{XParameter}
	(unordered?='unordered')?
	(unique?='unique')?
	'XParameter'
	name=EString
	'{'
		('multiplicity' multiplicity=XMultiplicity)?
		('annotations' '{' annotations+=XAnnotation ( "," annotations+=XAnnotation)* '}' )?
		('type' type=XGenericType)?
	'}';

EClass7 returns :
	{}
	''
	;

EClass8 returns :
	{}
	''
	;

EClass9 returns :
	{}
	''
	;

EClass0 returns :
	{}
	''
	;

EClass1 returns :
	{}
	''
	;

XEnumLiteral returns XEnumLiteral:
	{XEnumLiteral}
	'XEnumLiteral'
	name=EString
	'{'
		('value' value=EInt)?
		('literal' literal=EString)?
		('annotations' '{' annotations+=XAnnotation ( "," annotations+=XAnnotation)* '}' )?
	'}';

EInt returns ecore::EInt:
	'-'? INT;
